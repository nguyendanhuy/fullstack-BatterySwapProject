package BatterySwapStation.controller;

import BatterySwapStation.dto.*;

import BatterySwapStation.entity.*;
import BatterySwapStation.service.*;
import BatterySwapStation.service.UserService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;


import java.util.Map;

@RestController
@PreAuthorize("permitAll()")
@RequestMapping("/api/auth")
@RequiredArgsConstructor

public class AuthController {

    private final UserService userService;
    private final AuthService authService;
    private final EmailVerificationService emailVerificationService;
    private final EmailService emailService;
    private final JwtService jwtService;

    private static final String FRONTEND_VERIFY_URL = "http://localhost:5173/verify-email";



    @PostMapping("/register")
    public ResponseEntity<?> register(@Valid @RequestBody RegisterRequest req) {
        User user = userService.registerUser(req);

        String token = emailVerificationService.createVerificationToken(user);
        String verifyUrl = FRONTEND_VERIFY_URL + "?token=" + token;
        emailService.sendVerificationEmail(user.getFullName(), user.getEmail(), verifyUrl);

        // üÜï Sinh resendToken ƒë·ªÉ FE l∆∞u
        String resendToken = jwtService.generateResendToken(user.getEmail());

        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(Map.of(
                        "message", "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n.",
                        "userId", user.getUserId(),
                        "resendToken", resendToken
                ));
    }


    @GetMapping("/send")
    public String testEmail(@RequestParam String to) {
        emailService.sendVerificationEmail("Test User", to, "https://example.com/verify");
        return "‚úÖ Email test ƒë√£ g·ª≠i t·ªõi " + to;
    }


    @PostMapping("/login")
    public ResponseEntity<?> login(@Valid @RequestBody LoginRequest req) {
        return ResponseEntity.ok(authService.login(req));
    }

    @PutMapping("/role/{userId}")
    public ResponseEntity<?> updateUserRole(
            @PathVariable String userId,
            @RequestBody RoleDTO roleDTO) {
        boolean updated = authService.updateUserRole(userId, roleDTO);
        if (updated) {
            return ResponseEntity.ok("Role updated successfully!");
        } else {
            return ResponseEntity.badRequest().body("User or Role not found!");
        }
    }

    @GetMapping("/me")
    public ResponseEntity<?> getCurrentUser(@AuthenticationPrincipal User user) {
        if (user == null) {
            return ResponseEntity.status(401).body("Unauthorized");
        }

        return ResponseEntity.ok(Map.of(
                "userId", user.getUserId(),
                "email", user.getEmail(),
                "fullName", user.getFullName(),
                "phone", user.getPhone(),
                "role", user.getRole().getRoleName()
        ));
    }


    @GetMapping("/verify-email")
    public ResponseEntity<?> verifyEmail(@RequestParam("token") String token) {
        try {
            String result = emailVerificationService.verifyEmail(token);
            return ResponseEntity.ok(Map.of(
                    "status", 200,
                    "success", true,
                    "message", result
            ));
        } catch (RuntimeException ex) {
            // ‚úÖ B·∫Øt l·ªói t·ª´ EmailVerificationService
            // ‚úÖ L·ªói logic (token h·∫øt h·∫°n, kh√¥ng h·ª£p l·ªá, v.v.)
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of(
                    "status", 400,
                    "success", false,
                    "message", ex.getMessage()
            ));
        } catch (Exception ex) {
            // ‚úÖ L·ªói b·∫•t ng·ªù
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of(
                    "status", 500,
                    "success", false,
                    "message", "ƒê√£ x·∫£y ra l·ªói khi x√°c th·ª±c email. Vui l√≤ng th·ª≠ l·∫°i sau."
            ));
        }

    }

    @PostMapping("/resend-verification-by-token")
    public ResponseEntity<?> resendVerificationByToken(@RequestParam("token") String resendToken) {
        try {
            String email = jwtService.extractEmailFromResendToken(resendToken);
            User user = emailVerificationService.getUserByEmail(email);

            if (user.isVerified()) {
                return ResponseEntity.badRequest().body(Map.of(
                        "status", 400,
                        "success", false,
                        "message", "T√†i kho·∫£n n√†y ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c r·ªìi!"
                ));
            }

            // X√≥a token c≈© v√† t·∫°o m·ªõi
            emailVerificationService.invalidateOldTokens(user);

            String newToken = emailVerificationService.createVerificationToken(user);
            String verifyUrl = FRONTEND_VERIFY_URL + "?token=" + newToken;
            emailService.sendVerificationEmail(user.getFullName(), user.getEmail(), verifyUrl);

            // Sinh resendToken m·ªõi (thay token c≈©)
            String nextResendToken = jwtService.generateResendToken(email);

            return ResponseEntity.ok(Map.of(
                    "status", 200,
                    "success", true,
                    "message", "Email x√°c minh m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi " + email,
                    "resendToken", nextResendToken
            ));

        } catch (IllegalArgumentException ex) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of(
                    "status", 400,
                    "success", false,
                    "message", ex.getMessage()
            ));
        } catch (Exception ex) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of(
                    "status", 500,
                    "success", false,
                    "message", "Kh√¥ng th·ªÉ g·ª≠i l·∫°i email x√°c minh. Vui l√≤ng th·ª≠ l·∫°i sau."
            ));
        }
    }

}
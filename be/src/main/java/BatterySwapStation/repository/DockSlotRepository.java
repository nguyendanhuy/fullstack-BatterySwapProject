package BatterySwapStation.repository;

import BatterySwapStation.entity.Battery;
import BatterySwapStation.entity.DockSlot;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface DockSlotRepository extends JpaRepository<DockSlot, Integer> {

    // üîπ 1Ô∏è‚É£ T√¨m slot ƒëang ch·ª©a 1 battery c·ª• th·ªÉ
    Optional<DockSlot> findByBattery_BatteryId(String batteryId);

    // üîπ 2Ô∏è‚É£ T√¨m slot TR·ªêNG trong station (battery=null, active=true)
    Optional<DockSlot> findFirstByDock_Station_StationIdAndBatteryIsNullAndIsActiveTrue(Integer stationId);

    // üîπ 3Ô∏è‚É£ L·∫•y slot ƒëang "gi·ªØ pin ƒë·∫ßy c√≥ s·∫µn" ƒë·ªÉ giao cho user (pinOut)
    Optional<DockSlot> findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
            Integer stationId,
            DockSlot.SlotStatus slotStatus,
            Battery.BatteryStatus batteryStatus
    );
<<<<<<< Updated upstream
    long countByDock_Station_StationIdAndBattery_BatteryStatus(Integer stationId, Battery.BatteryStatus status);
=======

    // üîπ 4Ô∏è‚É£ L·∫•y slot ƒë·∫ßu ti√™n c√≥ lo·∫°i pin c·ª• th·ªÉ (model matching)
>>>>>>> Stashed changes
    Optional<DockSlot> findFirstByDock_Station_StationIdAndBattery_BatteryTypeAndBattery_BatteryStatusAndSlotStatusOrderByDock_DockNameAscSlotNumberAsc(
            Integer stationId,
            Battery.BatteryType batteryType,
            Battery.BatteryStatus batteryStatus,
            DockSlot.SlotStatus slotStatus
    );

    // üîπ 5Ô∏è‚É£ L·∫•y T·∫§T C·∫¢ c√°c slot c√≥ pin ƒë·∫ßy kh·∫£ d·ª•ng (cho handleSingleSwap)
    List<DockSlot> findAllByDock_Station_StationIdAndBattery_BatteryTypeAndBattery_BatteryStatusAndSlotStatusOrderByDock_DockNameAscSlotNumberAsc(
            Integer stationId,
            Battery.BatteryType batteryType,
            Battery.BatteryStatus batteryStatus,
            DockSlot.SlotStatus slotStatus
    );

    // üîπ 6Ô∏è‚É£ ƒê·∫øm s·ªë pin c√≥ tr·∫°ng th√°i AVAILABLE t·∫°i 1 tr·∫°m
    long countByDock_Station_StationIdAndBattery_BatteryStatus(Integer stationId, Battery.BatteryStatus status);
}

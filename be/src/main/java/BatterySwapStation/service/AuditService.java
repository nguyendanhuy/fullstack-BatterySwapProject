package BatterySwapStation.service;

import BatterySwapStation.dto.AuditIssueDTO;
import BatterySwapStation.entity.Battery;
import BatterySwapStation.entity.DockSlot;
import BatterySwapStation.repository.BatteryRepository;
import BatterySwapStation.repository.DockSlotRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import jakarta.transaction.Transactional;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class AuditService {

    private final BatteryRepository batteryRepository;
    private final DockSlotRepository dockSlotRepository;
    private final SimpMessagingTemplate messagingTemplate;

    @Transactional
    public Map<String, Object> checkDataDiscrepancy(Integer stationFilter, boolean pushRealtime) {

        // üîπ Load to√†n b·ªô d·ªØ li·ªáu ch·ªâ b·∫±ng 2 query nh·ªù @EntityGraph
        List<Battery> allBatteries = (stationFilter == null)
                ? batteryRepository.findAll()
                : batteryRepository.findByStationId(stationFilter);

        List<DockSlot> allSlots = (stationFilter == null)
                ? dockSlotRepository.findAll()
                : dockSlotRepository.findAllByDock_Station_StationId(stationFilter);

        List<AuditIssueDTO> issues = new ArrayList<>();
        String now = LocalDateTime.now().toString();

        // ‚úÖ 1. Pin c√≥ stationId nh∆∞ng kh√¥ng n·∫±m trong slot
        for (Battery b : allBatteries) {
            boolean needsSlot = switch (b.getBatteryStatus()) {
                case AVAILABLE, CHARGING, WAITING_CHARGE -> true;
                default -> false;
            };
            if (b.getStationId() != null && b.getDockSlot() == null && needsSlot) {
                issues.add(AuditIssueDTO.builder()
                        .batteryId(b.getBatteryId())
                        .stationId(b.getStationId())
                        .issueType("BATTERY_NO_SLOT")
                        .description("Pin c√≥ stationId nh∆∞ng kh√¥ng n·∫±m trong slot.")
                        .note("Ki·ªÉm tra l·∫°i slot tr·ªëng trong tr·∫°m v√† g√°n ƒë√∫ng dockSlot.")
                        .detectedAt(now)
                        .build());
            }
        }

        // ‚úÖ 2. Slot c√≥ pin nh∆∞ng battery kh√¥ng tham chi·∫øu ng∆∞·ª£c l·∫°i
        for (DockSlot s : allSlots) {
            if (s.getBattery() != null) {
                Battery b = s.getBattery();
                if (b.getDockSlot() == null || !Objects.equals(b.getDockSlot().getDockSlotId(), s.getDockSlotId())) {
                    issues.add(AuditIssueDTO.builder()
                            .batteryId(b.getBatteryId())
                            .stationId(s.getDock().getStation().getStationId())
                            .dockName(s.getDock().getDockName())
                            .slotNumber(s.getSlotNumber())
                            .issueType("SLOT_UNSYNC_BATTERY")
                            .description("Slot ch·ª©a pin nh∆∞ng battery kh√¥ng tham chi·∫øu ng∆∞·ª£c l·∫°i slot.")
                            .note("ƒê·ªìng b·ªô l·∫°i b.dockSlot = slot hi·ªán t·∫°i.")
                            .detectedAt(now)
                            .build());
                }
            }
        }

        // ‚úÖ 3. Pin CHARGING/WAITING_CHARGE nh∆∞ng kh√¥ng ·ªü slot n√†o
        for (Battery b : allBatteries) {
            if (b.getDockSlot() == null &&
                    (b.getBatteryStatus() == Battery.BatteryStatus.CHARGING ||
                            b.getBatteryStatus() == Battery.BatteryStatus.WAITING_CHARGE)) {
                issues.add(AuditIssueDTO.builder()
                        .batteryId(b.getBatteryId())
                        .stationId(b.getStationId())
                        .issueType("STATE_MISMATCH")
                        .description("Pin ƒëang CHARGING/WAITING_CHARGE nh∆∞ng kh√¥ng n·∫±m trong slot n√†o.")
                        .note("C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√π h·ª£p ho·∫∑c g√°n v√†o slot OCCUPIED.")
                        .detectedAt(now)
                        .build());
            }
        }

        // ‚úÖ 4. Pin v√† slot kh√°c station
        for (Battery b : allBatteries) {
            if (b.getDockSlot() != null) {
                Integer slotStationId = b.getDockSlot().getDock().getStation().getStationId();
                if (b.getStationId() != null && !b.getStationId().equals(slotStationId)) {
                    issues.add(AuditIssueDTO.builder()
                            .batteryId(b.getBatteryId())
                            .stationId(b.getStationId())
                            .dockName(b.getDockSlot().getDock().getDockName())
                            .slotNumber(b.getDockSlot().getSlotNumber())
                            .issueType("STATION_MISMATCH")
                            .description("Pin v√† slot thu·ªôc hai station kh√°c nhau.")
                            .note("ƒê·ªìng b·ªô b.stationId = station c·ªßa slot.")
                            .detectedAt(now)
                            .build());
                }
            }
        }

        // 5. Slot tr·∫°ng th√°i kh√¥ng kh·ªõp
        for (DockSlot s : allSlots) {
            Battery b = s.getBattery();
            switch (s.getSlotStatus()) {
                case EMPTY -> {
                    if (b != null) {
                        issues.add(AuditIssueDTO.builder()
                                .batteryId(b.getBatteryId())
                                .stationId(s.getDock().getStation().getStationId())
                                .dockName(s.getDock().getDockName())
                                .slotNumber(s.getSlotNumber())
                                .issueType("STATE_MISMATCH")
                                .description("Slot EMPTY nh∆∞ng l·∫°i c√≥ battery g·∫Øn.")
                                .note("Chuy·ªÉn slot sang OCCUPIED ho·∫∑c b·ªè battery kh·ªèi slot.")
                                .detectedAt(now)
                                .build());
                    }
                }
                case OCCUPIED -> {
                    if (b == null) {
                        issues.add(AuditIssueDTO.builder()
                                .batteryId(null)
                                .stationId(s.getDock().getStation().getStationId())
                                .dockName(s.getDock().getDockName())
                                .slotNumber(s.getSlotNumber())
                                .issueType("ORPHAN_SLOT")
                                .description("Slot OCCUPIED nh∆∞ng kh√¥ng c√≥ battery g·∫Øn.")
                                .note("Chuy·ªÉn slot sang EMPTY ho·∫∑c g·∫Øn battery ƒë√∫ng v√†o slot.")
                                .detectedAt(now)
                                .build());
                    }
                }
                default -> {}
            }
        }

        // ‚úÖ T·ªïng h·ª£p k·∫øt qu·∫£
        Map<String, Object> response = new LinkedHashMap<>();
        response.put("timestamp", now);
        response.put("stationFilter", stationFilter);
        response.put("totalBatteries", allBatteries.size());
        response.put("totalSlots", allSlots.size());
        response.put("totalIssues", issues.size());
        response.put("summary", issues.stream()
                .collect(Collectors.groupingBy(AuditIssueDTO::getIssueType, Collectors.counting())));
        response.put("issues", issues);

        // ‚úÖ Push realtime n·∫øu c·∫ßn
        if (pushRealtime && !issues.isEmpty()) {
            messagingTemplate.convertAndSend("/topic/admin-audit", response);
        }

        return response;
    }
}

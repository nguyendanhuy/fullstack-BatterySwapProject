package BatterySwapStation.service;

import BatterySwapStation.dto.RoleDTO;
import BatterySwapStation.entity.StaffAssign;
import BatterySwapStation.entity.UserSubscription;
import BatterySwapStation.repository.StaffAssignRepository;
import BatterySwapStation.repository.UserSubscriptionRepository;
import BatterySwapStation.utils.UserIdGenerator;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import BatterySwapStation.dto.LoginRequest;
import BatterySwapStation.dto.AuthResponse;
import BatterySwapStation.entity.Role;
import BatterySwapStation.entity.User;
import BatterySwapStation.repository.RoleRepository;
import BatterySwapStation.repository.UserRepository;
import BatterySwapStation.dto.GoogleUserInfo;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
public class AuthService {
    private final UserIdGenerator userIdGenerator;
    private final UserRepository userRepository;
    private final UserService userService;
    private final RoleRepository roleRepository;
    private final JwtService jwtService;
    private final StaffAssignRepository staffAssignRepository;
    private final UserSubscriptionRepository userSubscriptionRepository;

    // üîπ ƒêƒÉng nh·∫≠p th∆∞·ªùng
    public AuthResponse login(LoginRequest req) {
        User user = userService.findByEmail(req.getEmail());
        if (user == null) throw new RuntimeException("Email kh√¥ng t·ªìn t·∫°i");
        if (!userService.checkPassword(req.getPassword(), user.getPassword()))
            throw new RuntimeException("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng");
        if (!user.isActive())
            throw new RuntimeException("Ban ƒë√£ b·ªã ban kh·ªèi server. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n");
        if (!user.isVerified())
            throw new RuntimeException("B·∫°n ch∆∞a x√°c th·ª±c email");

        Integer assignedStationId = null;
        Long activeSubscriptionId = null;

        // üîπ N·∫øu l√† Staff
        if (user.getRole().getRoleId() == 2) {
            StaffAssign assign = staffAssignRepository.findFirstByUser_UserIdAndIsActiveTrue(user.getUserId());
            if (assign != null) assignedStationId = assign.getStationId();
        }

        // üîπ N·∫øu l√† Driver
        if (user.getRole().getRoleId() == 1) {
            UserSubscription sub = userSubscriptionRepository
                    .findFirstByUser_UserIdAndStatusAndEndDateAfter(
                            user.getUserId(),
                            UserSubscription.SubscriptionStatus.ACTIVE,
                            LocalDateTime.now()
                    );
            if (sub != null && sub.getPlan() != null) {
                activeSubscriptionId = sub.getPlan().getId();
            }
        }

        // Token m·ªõi g·∫Øn th√™m stationId / subscriptionId
        String token = jwtService.generateToken(
                user.getUserId(),
                user.getEmail(),
                user.getPhone(),
                user.getRole().getRoleName(),
                assignedStationId,
                activeSubscriptionId
        );

        return new AuthResponse(
                "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
                user.getUserId(),
                user.getEmail(),
                user.getFullName(),
                user.getPhone(),
                user.getRole().getRoleName(),
                token,
                assignedStationId,
                activeSubscriptionId,
                user.getRole().getRoleId() == 1 ? user.getWalletBalance() : null // ‚úÖ ch·ªâ driver
        );

    }

    // C·∫≠p nh·∫≠t role cho user
    public boolean updateUserRole(String userId, RoleDTO roleDTO) {
        User user = userRepository.findById(userId).orElse(null);
        if (user == null) return false;

        Role role = null;
        if (roleDTO.getRoleId() != 0) {
            role = roleRepository.findByRoleId(roleDTO.getRoleId());
        }
        if (role == null && roleDTO.getRoleName() != null) {
            role = roleRepository.findByRoleName(roleDTO.getRoleName());
        }
        if (role == null) return false;

        user.setRole(role);
        userRepository.save(user);
        return true;
    }

    //  Login b·∫±ng Google
    @Transactional
    public AuthResponse handleGoogleLogin(GoogleUserInfo info) {
        User user = userRepository.findByEmail(info.getEmail());
        boolean isNew = false;

        if (user == null) {
            Role defaultRole = roleRepository.findByRoleName("DRIVER");
            if (defaultRole == null) {
                throw new IllegalStateException("Role DRIVER ch∆∞a t·ªìn t·∫°i trong h·ªá th·ªëng");
            }

            user = new User();
            user.setUserId(userIdGenerator.generateUserId(defaultRole));
            user.setFullName(info.getName());
            user.setEmail(info.getEmail());
            user.setPassword("");
            user.setAddress("");
            user.setPhone("");
            user.setActive(true);
            user.setVerified(info.isEmailVerified());
            user.setRole(defaultRole);

            userRepository.save(user);
            isNew = true;
        }

        if (!user.isActive())
            throw new RuntimeException("T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a");
        if (!user.isVerified())
            throw new RuntimeException("B·∫°n ch∆∞a x√°c th·ª±c email Google");

        Integer assignedStationId = null;
        Long activeSubscriptionId = null;

        // N·∫øu l√† Staff (tr∆∞·ªùng h·ª£p Google Staff)
        if (user.getRole().getRoleId() == 2) {
            StaffAssign assign = staffAssignRepository.findFirstByUser_UserIdAndIsActiveTrue(user.getUserId());
            if (assign != null) assignedStationId = assign.getStationId();
        }

        // N·∫øu l√† Driver
        if (user.getRole().getRoleId() == 1) {
            UserSubscription sub = userSubscriptionRepository
                    .findFirstByUser_UserIdAndStatusAndEndDateAfter(
                            user.getUserId(),
                            UserSubscription.SubscriptionStatus.ACTIVE,
                            LocalDateTime.now()
                    );
            if (sub != null && sub.getPlan() != null) {
                activeSubscriptionId = sub.getPlan().getId();
            }
        }

        // Token m·ªõi g·∫Øn th√™m stationId / subscriptionId
        String token = jwtService.generateToken(
                user.getUserId(),
                user.getEmail(),
                user.getPhone(),
                user.getRole().getRoleName(),
                assignedStationId,
                activeSubscriptionId
        );

        String message = isNew
                ? "ƒêƒÉng k√Ω m·ªõi th√†nh c√¥ng, vui l√≤ng b·ªï sung SƒêT v√† ƒë·ªãa ch·ªâ sau nh√©"
                : "ƒêƒÉng nh·∫≠p th√†nh c√¥ng";

        return new AuthResponse(
                message,
                user.getUserId(),
                user.getEmail(),
                user.getFullName(),
                user.getPhone(),
                user.getRole().getRoleName(),
                token,
                assignedStationId,
                activeSubscriptionId,
                user.getRole().getRoleId() == 1 ? user.getWalletBalance() : null
        );
    }
}

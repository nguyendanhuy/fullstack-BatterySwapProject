package BatterySwapStation.service;

import BatterySwapStation.dto.*;
import BatterySwapStation.entity.*;
import BatterySwapStation.repository.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.persistence.EntityNotFoundException;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import BatterySwapStation.repository.InvoiceRepository;
import BatterySwapStation.repository.UserSubscriptionRepository;
import BatterySwapStation.entity.UserSubscription;
import BatterySwapStation.entity.SubscriptionPlan;
import BatterySwapStation.entity.Invoice;
import BatterySwapStation.entity.User;
import org.springframework.context.event.EventListener;

import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.PostMapping;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;


@Service
@Transactional
@RequiredArgsConstructor // (Gi·ªØ nguy√™n n·∫øu b·∫°n ƒëang d√πng)
@Slf4j
public class BookingService {

    private final BookingRepository bookingRepository;
    private final UserRepository userRepository;
    private final StationRepository stationRepository;
    private final VehicleRepository vehicleRepository;
    private final SystemPriceService systemPriceService;
    private final InvoiceService invoiceService;
    private final InvoiceRepository invoiceRepository;
    private final ObjectMapper objectMapper;
    private final UserSubscriptionRepository userSubscriptionRepository;
    private final PaymentService paymentService;
    private final PaymentRepository paymentRepository;

    /**
     * T·∫°o ƒë·∫∑t ch·ªó m·ªõi (gi·ªõi h·∫°n t·ªëi ƒëa 1 xe, ch·ªâ 1 tr·∫°m, ng√†y trong 2 ng√†y, khung gi·ªù h·ª£p l·ªá)
     * Cho ph√©p 1 user ƒë·∫∑t nhi·ªÅu xe c√πng l√∫c n·∫øu tr·∫°m ƒë·ªß pin
     */
    @PostMapping("/create")
    public BookingResponse createBooking(BookingRequest request) {
        // ================== X√ÅC TH·ª∞C XE ==================
        Integer vehicleId = request.getVehicleId();
        if (vehicleId == null) {
            throw new IllegalArgumentException("B·∫°n ph·∫£i ch·ªçn m·ªôt xe ƒë·ªÉ ƒë·∫∑t pin.");
        }

        Vehicle vehicle = vehicleRepository.findById(vehicleId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y xe v·ªõi m√£: " + vehicleId));

        if (vehicle.getUser() == null) {
            throw new IllegalArgumentException("Xe n√†y ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω cho ng∆∞·ªùi d√πng n√†o.");
        }

        User user = vehicle.getUser();

        // ================== KI·ªÇM TRA BOOKING CH∆ØA HO√ÄN TH√ÄNH ==================
        if (bookingRepository.hasIncompleteBookingForVehicle(vehicleId)) {
            List<Booking> incompleteBookings = bookingRepository.findIncompleteBookingsByVehicle(vehicleId);
            if (!incompleteBookings.isEmpty()) {
                Booking firstIncomplete = incompleteBookings.get(0);
                throw new IllegalStateException(String.format(
                        "Xe %s ƒëang c√≥ booking #%d ch∆∞a ho√†n th√†nh (Tr·∫°ng th√°i: %s, Ng√†y: %s, Gi·ªù: %s). " +
                                "Vui l√≤ng ho√†n th√†nh ho·∫∑c h·ªßy booking n√†y tr∆∞·ªõc khi ƒë·∫∑t m·ªõi.",
                        vehicle.getVIN(),
                        firstIncomplete.getBookingId(),
                        firstIncomplete.getBookingStatus(),
                        firstIncomplete.getBookingDate(),
                        firstIncomplete.getTimeSlot()
                ));
            } else {
                throw new IllegalStateException(String.format(
                        "Xe %s ƒëang c√≥ booking ch∆∞a ho√†n th√†nh. " +
                                "Vui l√≤ng ho√†n th√†nh ho·∫∑c h·ªßy booking hi·ªán t·∫°i tr∆∞·ªõc khi ƒë·∫∑t m·ªõi.",
                        vehicle.getVIN()
                ));
            }
        }

        // ================== X√ÅC TH·ª∞C TR·∫†M ==================
        Station station = stationRepository.findById(request.getStationId())
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y tr·∫°m v·ªõi m√£: " + request.getStationId()));

        // ================== KI·ªÇM TRA NG√ÄY ==================
        LocalDate now = LocalDate.now();
        if (request.getBookingDate().isBefore(now) || request.getBookingDate().isAfter(now.plusDays(7))) {
            throw new IllegalArgumentException("Ng√†y ƒë·∫∑t pin ph·∫£i n·∫±m trong v√≤ng 7 ng√†y k·ªÉ t·ª´ h√¥m nay.");
        }

        if (request.getTimeSlot() == null) {
            throw new IllegalArgumentException("B·∫°n ph·∫£i ch·ªçn khung gi·ªù.");
        }

        LocalTime timeSlot = LocalTime.parse(request.getTimeSlot(), DateTimeFormatter.ofPattern("HH:mm"));

        // ================== KI·ªÇM TRA TR√ôNG BOOKING ==================
        if (bookingRepository.existsDuplicateBooking(user, vehicle, station, request.getBookingDate(), timeSlot)) {
            throw new IllegalStateException("B·∫°n kh√¥ng th·ªÉ ƒë·∫∑t c√πng m·ªôt xe t·∫°i c√πng m·ªôt tr·∫°m v√† khung gi·ªù.");
        }

        // ================== X√ÅC ƒê·ªäNH S·ªê PIN MU·ªêN ƒê·ªîI ==================
        Integer requestedBatteryCount = request.getBatteryCount();
        if (requestedBatteryCount == null) {
            requestedBatteryCount = vehicle.getBatteryCount();
        }

        // ================== KI·ªÇM TRA C√îNG SU·∫§T TR·∫†M ==================
        Integer alreadyBookedCount = bookingRepository.getBookedBatteryCountAtTimeSlot(station, request.getBookingDate(), timeSlot);
        if (alreadyBookedCount == null) alreadyBookedCount = 0;

        Integer stationCapacity = station.getDocks().size();
        if ((alreadyBookedCount + requestedBatteryCount) > stationCapacity) {
            throw new IllegalStateException(String.format(
                    "Tr·∫°m kh√¥ng ƒë·ªß pin cho khung gi·ªù n√†y. ƒê√£ c√≥ %d pin ƒë∆∞·ª£c ƒë·∫∑t, y√™u c·∫ßu %d pin, v∆∞·ª£t qu√° c√¥ng su·∫•t (%d).",
                    alreadyBookedCount, requestedBatteryCount, stationCapacity
            ));
        }

        // ================== T√çNH GI√Å D·ª∞A TR√äN G√ìI C∆Ø·ªöC ==================
        Double standardSwapPrice = systemPriceService.getPriceByType(SystemPrice.PriceType.BATTERY_SWAP);
        Double finalBookingPrice = standardSwapPrice * requestedBatteryCount.doubleValue();
        boolean isFreeSwap = false;
        Optional<UserSubscription> activeSub = userSubscriptionRepository.findActiveSubscriptionForUser(
                user.getUserId(),
                UserSubscription.SubscriptionStatus.ACTIVE,
                LocalDateTime.now()
        );

        if (activeSub.isPresent()) {
            UserSubscription sub = activeSub.get();
            SubscriptionPlan plan = sub.getPlan();
            int limit = (plan.getSwapLimit() == null || plan.getSwapLimit() < 0) ? -1 : plan.getSwapLimit();
            int used = sub.getUsedSwaps();

            if (limit == -1 || used + requestedBatteryCount <= limit) {
                log.info("User {} √°p d·ª•ng g√≥i c∆∞·ªõc mi·ªÖn ph√≠: {}", user.getUserId(), plan.getPlanName());
                finalBookingPrice = 0.0;
                isFreeSwap = true;
            } else {
                log.warn("User {} ƒë√£ h·∫øt l∆∞·ª£t trong g√≥i {}. T√≠nh ph√≠ {} VND.",
                        user.getUserId(), plan.getPlanName(), finalBookingPrice);
            }
        }

        // ================== X·ª¨ L√ù THANH TO√ÅN ==================
        Booking.BookingStatus initialBookingStatus;
        Invoice.InvoiceStatus initialInvoiceStatus;
        Payment.PaymentMethod paymentMethodEnum = null;
        Payment.PaymentStatus paymentStatusEnum = null;
        boolean createPaymentRecord = false;
        String paymentMethodRequest = request.getPaymentMethod();

        if (isFreeSwap) {
            log.info("Booking 0ƒë (G√≥i c∆∞·ªõc). T·ª± ƒë·ªông k√≠ch ho·∫°t.");
            initialBookingStatus = Booking.BookingStatus.PENDINGSWAPPING;
            initialInvoiceStatus = Invoice.InvoiceStatus.PAID;

            // üÜï Ghi nh·∫≠n thanh to√°n b·∫±ng Subscription
            paymentMethodEnum = Payment.PaymentMethod.SUBSCRIPTION;
            paymentStatusEnum = Payment.PaymentStatus.SUCCESS;
            createPaymentRecord = true;

        } else {
            if (paymentMethodRequest == null || paymentMethodRequest.isBlank()) {
                throw new IllegalArgumentException("Ph∆∞∆°ng th·ª©c thanh to√°n l√† b·∫Øt bu·ªôc (v√≠ d·ª•: WALLET ho·∫∑c VNPAY).");
            }

            if (paymentMethodRequest.equalsIgnoreCase("WALLET")) {
                log.info("Booking tr·∫£ b·∫±ng v√≠.");
                Double userWallet = user.getWalletBalance();
                if (userWallet < finalBookingPrice) {
                    throw new IllegalStateException(String.format(
                            "S·ªë d∆∞ v√≠ kh√¥ng ƒë·ªß. C·∫ßn %.0f, hi·ªán c√≥ %.0f",
                            finalBookingPrice, userWallet
                    ));
                }
                user.setWalletBalance(userWallet - finalBookingPrice);
                userRepository.save(user);

                initialBookingStatus = Booking.BookingStatus.PENDINGSWAPPING;
                initialInvoiceStatus = Invoice.InvoiceStatus.PAID;
                paymentMethodEnum = Payment.PaymentMethod.WALLET;
                paymentStatusEnum = Payment.PaymentStatus.SUCCESS;
                createPaymentRecord = true;

            } else if (paymentMethodRequest.equalsIgnoreCase("VNPAY")) {
                log.info("Booking thanh to√°n qua VNPAY.");
                initialBookingStatus = Booking.BookingStatus.PENDINGPAYMENT;
                initialInvoiceStatus = Invoice.InvoiceStatus.PENDING;
                paymentMethodEnum = Payment.PaymentMethod.VNPAY;
                paymentStatusEnum = Payment.PaymentStatus.PENDING;
                createPaymentRecord = true;

            } else {
                throw new IllegalArgumentException("Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá: " + paymentMethodRequest);
            }
        }

        // ================== T·∫†O INVOICE ==================
        Invoice invoice = new Invoice();
        invoice.setUserId(user.getUserId());
        invoice.setPricePerSwap(standardSwapPrice);
        invoice.setTotalAmount(finalBookingPrice);
        invoice.setCreatedDate(LocalDateTime.now());
        invoice.setInvoiceStatus(initialInvoiceStatus);
        invoice.setNumberOfSwaps(requestedBatteryCount);
        invoice.setInvoiceType(Invoice.InvoiceType.BOOKING);
        Invoice savedInvoice = invoiceRepository.save(invoice);

        // ================== T·∫†O BOOKING ==================
        Booking booking = Booking.builder()
                .user(user)
                .station(station)
                .vehicle(vehicle)
                .vehicleType(vehicle.getVehicleType() != null ? vehicle.getVehicleType().toString() : "UNKNOWN")
                .amount(finalBookingPrice)
                .bookingDate(request.getBookingDate())
                .timeSlot(timeSlot)
                .batteryType(request.getBatteryType() != null ? request.getBatteryType() : "UNKNOWN")
                .batteryCount(requestedBatteryCount)
                .bookingStatus(initialBookingStatus)
                .notes("ƒê·∫∑t l·ªãch qua API")
                .totalPrice(finalBookingPrice)
                .invoice(savedInvoice)
                .build();
        Booking savedBooking = bookingRepository.save(booking);

        // ================== T·∫†O PAYMENT ==================
        if (createPaymentRecord) {
            double amountToSave = finalBookingPrice;
            String message = null;
            String gateway = null;

            if (isFreeSwap && activeSub.isPresent()) {
                // üÜï Ghi r√µ g√≥i th√°ng n√†o ƒë√£ chi tr·∫£
                UserSubscription sub = activeSub.get();
                String planName = sub.getPlan() != null ? sub.getPlan().getPlanName() : "UNKNOWN_PLAN";
                amountToSave = 0.0;
                gateway = "SUBSCRIPTION_PLAN";
                message = "Thanh to√°n b·∫±ng g√≥i Subscription: " + planName;
            }

            Payment payment = Payment.builder()
                    .invoice(savedInvoice)
                    .amount(amountToSave)
                    .paymentMethod(paymentMethodEnum)
                    .paymentStatus(paymentStatusEnum)
                    .transactionType(Payment.TransactionType.PAYMENT)
                    .gateway(gateway)
                    .message(message)
                    .createdAt(LocalDateTime.now())
                    .build();
            paymentRepository.save(payment);
        }

        // ================== TR·ª™ L∆Ø·ª¢T SUBSCRIPTION ==================
        if (isFreeSwap && activeSub.isPresent()) {
            UserSubscription sub = activeSub.get();
            sub.setUsedSwaps(sub.getUsedSwaps() + requestedBatteryCount);
            userSubscriptionRepository.save(sub);
        }

        // ================== T·∫†O RESPONSE ==================
        BookingResponse response = isFreeSwap && activeSub.isPresent()
                ? convertToResponse(savedBooking, activeSub.get())
                : convertToResponse(savedBooking, null);

        String message;
        if (isFreeSwap) {
            message = "Booking (G√≥i c∆∞·ªõc) th√†nh c√¥ng! Tr·∫°ng th√°i: PENDINGSWAPPING";
        } else if ("WALLET".equalsIgnoreCase(paymentMethodRequest)) {
            message = String.format("Booking #%d thanh to√°n qua V√≠ th√†nh c√¥ng. T·ªïng: %.0f VND.",
                    savedBooking.getBookingId(), savedBooking.getAmount());
        } else {
            message = String.format("Booking #%d t·∫°o th√†nh c√¥ng. Tr·∫°ng th√°i: PENDINGPAYMENT. T·ªïng: %.0f VND.",
                    savedBooking.getBookingId(), savedBooking.getAmount());
        }

        response.setMessage(message);
        response.setBatteryCount(savedBooking.getBatteryCount());
        return response;
    }

    /**
     * L·∫•y danh s√°ch ƒë·∫∑t ch·ªó c·ªßa ng∆∞·ªùi d√πng
     */
    @Transactional(readOnly = true)
    public List<BookingResponse> getUserBookings(String userId) {

        // 1. T√¨m t·∫•t c·∫£ booking (Code c·ªßa b·∫°n)
        List<Booking> bookings = bookingRepository.findByUserWithAllDetails(userId); // (Ho·∫∑c query c≈© c·ªßa b·∫°n)

        // 2. Chuy·ªÉn ƒë·ªïi (convert) T·ª™NG booking
        return bookings.stream()
                .map(booking -> {
                    // 3. [LOGIC "TH√îNG MINH"]
                    UserSubscription subscription = null; // M·∫∑c ƒë·ªãnh l√† null

                    // Ki·ªÉm tra xem c√≥ c·∫ßn t√¨m Subscription kh√¥ng
                    if (booking.getTotalPrice() != null &&
                            booking.getTotalPrice() == 0.0 &&
                            booking.getInvoice() != null &&
                            booking.getInvoice().getCreatedDate() != null) {

                        Optional<UserSubscription> subOpt = userSubscriptionRepository.findActiveSubscriptionForUserOnDate(
                                booking.getUser().getUserId(),
                                UserSubscription.SubscriptionStatus.ACTIVE,
                                booking.getInvoice().getCreatedDate()
                        );

                        if (subOpt.isPresent()) {
                            subscription = subOpt.get(); // T√¨m th·∫•y g√≥i c∆∞·ªõc
                        }
                    }

                    // 4. G·ªçi h√†m helper c·ªßa B·∫†N (v·ªõi 2 tham s·ªë)
                    return convertToResponse(booking, subscription);

                })
                .collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public Map<String, Object> getBookingById(Long bookingId) {
        // 1. T√¨m Booking
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y booking v·ªõi ID: " + bookingId));

        // 2. G·ªçi h√†m tr·ª£ gi√∫p "th√¥ng minh"
        return convertBookingToMap(booking);
    }

    /**
     * Chuy·ªÉn 1 Booking sang Map, t·ª± ƒë·ªông t√¨m v√† ƒë√≠nh k√®m th√¥ng tin g√≥i c∆∞·ªõc (Subscription) n·∫øu c√≥.
     */
    @Transactional(readOnly = true)
    protected Map<String, Object> convertBookingToMap(Booking booking) {
        Map<String, Object> result = new LinkedHashMap<>();
        result.put("bookingId", booking.getBookingId());
        result.put("bookingStatus", booking.getBookingStatus().name());
        result.put("bookingDate", booking.getBookingDate());
        result.put("timeSlot", booking.getTimeSlot());
        result.put("amount", booking.getAmount());
        result.put("batteryType", booking.getBatteryType());
        result.put("batteryCount", booking.getBatteryCount());

        // Th√¥ng tin kh√°ch h√†ng
        if (booking.getUser() != null) {
            result.put("userId", booking.getUser().getUserId());
            result.put("fullName", booking.getUser().getFullName());
            result.put("email", booking.getUser().getEmail());
            result.put("phone", booking.getUser().getPhone());
        }

        // Th√¥ng tin xe
        if (booking.getVehicle() != null) {
            result.put("vehicleId", booking.getVehicle().getVehicleId());
            result.put("vehicleVin", booking.getVehicle().getVIN());
            result.put("vehicleType", booking.getVehicle().getVehicleType().toString());
            result.put("licensePlate", booking.getVehicle().getLicensePlate());
        }

        // Th√¥ng tin tr·∫°m
        if (booking.getStation() != null) {
            result.put("stationId", booking.getStation().getStationId());
            result.put("stationName", booking.getStation().getStationName());
            result.put("stationAddress", booking.getStation().getAddress());
        }

        // Th√¥ng tin thanh to√°n
        if (booking.getInvoice() != null) {
            result.put("invoiceId", booking.getInvoice().getInvoiceId());
            result.put("totalAmount", booking.getInvoice().getTotalAmount());
            result.put("invoiceStatus", booking.getInvoice().getInvoiceStatus().name());
        }

        // ========== [LOGIC "TH√îNG MINH" N·∫∞M ·ªû ƒê√ÇY] ==========

        // ƒê·∫∑t m·∫∑c ƒë·ªãnh
        result.put("isFreeSwap", false);
        result.put("subscriptionPlanName", null);
        result.put("remainingSwaps", null);
        result.put("totalSwapLimit", null);

        // Ki·ªÉm tra v√† th√™m th√¥ng tin g√≥i c∆∞·ªõc
        if (booking.getInvoice() != null &&
                booking.getInvoice().getTotalAmount() != null &&
                booking.getInvoice().getTotalAmount() == 0.0 && // Ki·ªÉm tra mi·ªÖn ph√≠
                booking.getUser() != null &&
                booking.getInvoice().getCreatedDate() != null) {

            Optional<UserSubscription> subOpt = userSubscriptionRepository.findActiveSubscriptionForUserOnDate(
                    booking.getUser().getUserId(),
                    UserSubscription.SubscriptionStatus.ACTIVE,
                    booking.getInvoice().getCreatedDate()
            );

            if (subOpt.isPresent()) {
                UserSubscription sub = subOpt.get();
                SubscriptionPlan plan = sub.getPlan();

                int limit = (plan.getSwapLimit() == null || plan.getSwapLimit() < 0) ? -1 : plan.getSwapLimit();
                int remaining = limit == -1 ? -1 : (limit - sub.getUsedSwaps());

                result.put("isFreeSwap", true); // Ghi ƒë√® (true)
                result.put("subscriptionPlanName", plan.getPlanName());
                result.put("remainingSwaps", remaining);
                result.put("totalSwapLimit", limit);
            }
        }
        // ===============================================

        return result;
    }


    /**
     * H·ªßy ƒë·∫∑t ch·ªó
     */
    @Transactional
    public BookingResponse cancelBooking(CancelBookingRequest request) {
        User user = userRepository.findById(request.getUserId())
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi m√£: " + request.getUserId()));

        Booking booking = bookingRepository.findByBookingIdAndUser(request.getBookingId(), user)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒë·∫∑t pin v·ªõi m√£: " + request.getBookingId()));

        // Ki·ªÉm tra ƒë·∫∑t ch·ªó c√≥ th·ªÉ h·ªßy kh√¥ng
        if (Booking.BookingStatus.CANCELLED.equals(booking.getBookingStatus())) {
            throw new IllegalStateException("L∆∞·ª£t ƒë·∫∑t pin n√†y ƒë√£ b·ªã h·ªßy tr∆∞·ªõc ƒë√≥.");
        }
        if (Booking.BookingStatus.COMPLETED.equals(booking.getBookingStatus())) {
            throw new IllegalStateException("Kh√¥ng th·ªÉ h·ªßy l∆∞·ª£t ƒë·∫∑t pin ƒë√£ ho√†n th√†nh.");
        }

        // Ki·ªÉm tra th·ªùi gian h·ªßy
        LocalDateTime scheduledDateTime = LocalDateTime.of(booking.getBookingDate(), booking.getTimeSlot());
        LocalDateTime currentDateTime = LocalDateTime.now();
        LocalDateTime minimumCancelTime = scheduledDateTime.minusHours(1);
        if (currentDateTime.isAfter(minimumCancelTime)) {
            throw new IllegalStateException(String.format(
                    "Kh√¥ng th·ªÉ h·ªßy booking. Ch·ªâ c√≥ th·ªÉ h·ªßy tr∆∞·ªõc √≠t nh·∫•t 1 ti·∫øng so v·ªõi th·ªùi gian ƒë·∫∑t (%s %s). Gi·ªõi h·∫°n: %s",
                    booking.getBookingDate(), booking.getTimeSlot(), minimumCancelTime));
        }

        // ‚úÖ H·ªßy v√† l∆∞u l√Ω do
        booking.setBookingStatus(Booking.BookingStatus.CANCELLED);
        booking.setCancellationReason(request.getCancelReason());
        Booking savedBooking = bookingRepository.save(booking);

        // ‚úÖ T·ª± ƒë·ªông ho√†n ti·ªÅn v·ªÅ v√≠ n·∫øu booking c√≥ h√≥a ƒë∆°n v√† payment th√†nh c√¥ng
        Invoice invoice = booking.getInvoice();
        if (invoice != null && invoice.getPayments() != null && !invoice.getPayments().isEmpty()) {

            // L·∫•y payment th√†nh c√¥ng g·∫ßn nh·∫•t
            Payment successfulPayment = invoice.getPayments().stream()
                    .filter(p -> p.getPaymentStatus() == Payment.PaymentStatus.SUCCESS)
                    .max(Comparator.comparing(Payment::getCreatedAt))
                    .orElse(null);

            if (successfulPayment != null) {
                double refundAmount = booking.getAmount();

                // ‚úÖ T·∫°o b·∫£n ghi Payment REFUND
                Payment refund = Payment.builder()
                        .amount(refundAmount)
                        .paymentMethod(Payment.PaymentMethod.WALLET)
                        .paymentStatus(Payment.PaymentStatus.SUCCESS)
                        .transactionType(Payment.TransactionType.REFUND)
                        .gateway("INTERNAL_WALLET")
                        .invoice(invoice)
                        .message("Ho√†n ti·ªÅn cho booking #" + booking.getBookingId() + " v·ªÅ v√≠ trung gian")
                        .createdAt(LocalDateTime.now())
                        .build();

                paymentRepository.save(refund);

                // ‚úÖ C·ªông ti·ªÅn v√≠ ng∆∞·ªùi d√πng
                user.setWalletBalance(user.getWalletBalance() + refundAmount);
                userRepository.save(user);
            }
        }

        // ‚úÖ Tr·∫£ v·ªÅ response
        BookingResponse response = convertToResponse(savedBooking);
        String cancelMessage = String.format(
                "Booking #%d ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng! L√Ω do: %s",
                savedBooking.getBookingId(),
                request.getCancelReason() != null ? request.getCancelReason() : "Kh√¥ng c√≥ l√Ω do"
        );
        response.setMessage(cancelMessage);

        return response;
    }


    /**
     * L·∫•y danh s√°ch ƒë·∫∑t ch·ªó c·ªßa tr·∫°m
     */
    @Transactional(readOnly = true)
    public List<BookingResponse> getStationBookings(Integer stationId) {
        Station station = stationRepository.findById(stationId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y tr·∫°m v·ªõi m√£: " + stationId));

        List<Booking> bookings = bookingRepository.findByStation(station);
        return bookings.stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·∫∑t ch·ªó
     */
    public BookingResponse updateBookingStatus(Long bookingId, String newStatus) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒë·∫∑t pin v·ªõi m√£: " + bookingId));

        // Chuy·ªÉn ƒë·ªïi String sang enum
        try {
            Booking.BookingStatus status = Booking.BookingStatus.valueOf(newStatus.toUpperCase());
            booking.setBookingStatus(status);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + newStatus + ". C√°c tr·∫°ng th√°i h·ª£p l·ªá: PENDINGPAYMENT, PENDINGSWAPPING, CANCELLED, COMPLETED, FAILED");
        }

        Booking savedBooking = bookingRepository.save(booking);

        return convertToResponse(savedBooking);
    }

    /**
     * L·∫•y t·∫•t c·∫£ ƒë·∫∑t ch·ªó (d√†nh cho qu·∫£n tr·ªã vi√™n)
     */
    @Transactional(readOnly = true)
    public List<BookingResponse> getAllBookings() {
        List<Booking> bookings = bookingRepository.findAll();
        return bookings.stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * X√°c nh·∫≠n thanh to√°n cho booking v·ªõi th√¥ng b√°o
     */
    public BookingResponse confirmPayment(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒë·∫∑t pin vÔøΩÔøΩi m√£: " + bookingId));

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking - S·ª¨ D·ª§NG TR·∫†NG TH√ÅI M·ªöI
        booking.setBookingStatus(Booking.BookingStatus.PENDINGSWAPPING); // Chuy·ªÉn sang ch·ªù ƒë·ªïi pin

        Booking savedBooking = bookingRepository.save(booking);

        // T·∫°o th√¥ng b√°o thanh to√°n th√†nh c√¥ng
        String paymentMessage = String.format(
            "Thanh to√°n th√†nh c√¥ng cho Booking #%d. S·ªë ti·ªÅn: %.0f VND. Tr·∫°ng th√°i: Ch·ªù ƒë·ªïi pin",
            booking.getBookingId(),
            booking.getAmount()
        );

        BookingResponse response = convertToResponse(savedBooking);
        response.setMessage(paymentMessage); // Th√™m message v√†o response

        return response;
    }

    /**
     * Ho√†n th√†nh booking v√† t·∫°o invoice v·ªõi th√¥ng b√°o
     */
    public BookingResponse completeBookingWithInvoice(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒë·∫∑t pin v·ªõi m√£: " + bookingId));

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking th√†nh COMPLETED
        booking.setBookingStatus(Booking.BookingStatus.COMPLETED);
        booking.setCompletedTime(LocalDate.now());

        Booking savedBooking = bookingRepository.save(booking);

        // T·∫°o th√¥ng b√°o th√†nh c√¥ng
        String successMessage = String.format(
            "Booking #%d ƒë∆∞·ª£c ho√†n th√†nh th√†nh c√¥ng. T·ªïng ti·ªÅn: %.0f VND",
            booking.getBookingId(),
            booking.getAmount()
        );

        BookingResponse response = convertToResponse(savedBooking);
        response.setMessage(successMessage); // Th√™m message v√†o response

        return response;
    }

    /**
     * Ho√†n th√†nh vi·ªác ƒë·ªïi pin (chuy·ªÉn t·ª´ PENDINGSWAPPING sang COMPLETED)
     */
    public BookingResponse completeBatterySwapping(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒë·∫∑t pin v·ªõi m√£: " + bookingId));

        // Ki·ªÉm tra booking ƒëang ch·ªù ƒë·ªïi pin ch∆∞a
        if (booking.getBookingStatus() != Booking.BookingStatus.PENDINGSWAPPING) {
            throw new IllegalStateException("Booking ph·∫£i ·ªü tr·∫°ng th√°i ch·ªù ƒë·ªïi pin (PENDINGSWAPPING) ƒë·ªÉ c√≥ th·ªÉ ho√†n th√†nh.");
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking th√†nh COMPLETED
        booking.setBookingStatus(Booking.BookingStatus.COMPLETED);
        booking.setCompletedTime(LocalDate.now());

        Booking savedBooking = bookingRepository.save(booking);

        // T·∫°o th√¥ng b√°o th√†nh c√¥ng
        String successMessage = String.format(
            "Booking #%d ƒë√£ ho√†n th√†nh ƒë·ªïi pin th√†nh c√¥ng! T·ªïng ti·ªÅn: %.0f VND",
            booking.getBookingId(),
            booking.getAmount()
        );

        BookingResponse response = convertToResponse(savedBooking);
        response.setMessage(successMessage);

        return response;
    }

    /**
     * X·ª≠ l√Ω thanh to√°n ƒë∆°n gi·∫£n - chuy·ªÉn t·ª´ PENDINGPAYMENT sang PENDINGSWAPPING ngay l·∫≠p t·ª©c
     */
    public BookingResponse processPayment(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒë·∫∑t pin v·ªõi m√£: " + bookingId));

        // Ki·ªÉm tra booking ƒëang ch·ªù thanh to√°n ch∆∞a
        if (booking.getBookingStatus() != Booking.BookingStatus.PENDINGPAYMENT) {
            throw new IllegalStateException("Booking ph·∫£i ·ªü tr·∫°ng th√°i ch·ªù thanh to√°n (PENDINGPAYMENT) ƒë·ªÉ c√≥ th·ªÉ x·ª≠ l√Ω thanh to√°n.");
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking sang ch·ªù ƒë·ªïi pin ngay l·∫≠p t·ª©c
        booking.setBookingStatus(Booking.BookingStatus.PENDINGSWAPPING);

        Booking savedBooking = bookingRepository.save(booking);

        // T·∫°o th√¥ng b√°o x·ª≠ l√Ω thanh to√°n th√†nh c√¥ng
        String paymentMessage = String.format(
            "X·ª≠ l√Ω thanh to√°n th√†nh c√¥ng cho Booking #%d. S·ªë ti·ªÅn: %.0f VND. Tr·∫°ng th√°i: Ch·ªù ƒë·ªïi pin",
            booking.getBookingId(),
            booking.getAmount()
        );

        BookingResponse response = convertToResponse(savedBooking);
        response.setMessage(paymentMessage);

        return response;
    }

    /**
     * Chuy·ªÉn tr·∫°ng th√°i booking t·ª´ PENDINGPAYMENT sang FAILED
     */
    @Transactional
    public BookingResponse markBookingAsFailed(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒë·∫∑t pin v·ªõi m√£: " + bookingId));

        if (booking.getBookingStatus() != Booking.BookingStatus.PENDINGPAYMENT) {
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ chuy·ªÉn sang FAILED khi tr·∫°ng th√°i hi·ªán t·∫°i l√† PENDINGPAYMENT");
        }

        // Set tr·∫°ng th√°i FAILED
        booking.setBookingStatus(Booking.BookingStatus.FAILED);

        // Set l√Ω do h·ªßy
        booking.setCancellationReason("Thanh to√°n th·∫•t b·∫°i");

        Booking savedBooking = bookingRepository.save(booking);
        return convertToResponse(savedBooking);
    }

    /**
     * L·∫•y danh s√°ch ƒë·∫∑t ch·ªó c·ªßa ng∆∞·ªùi d√πng theo ng√†y
     */
    @Transactional(readOnly = true)
    public List<BookingResponse> getUserBookingsByDate(String userId, LocalDate date) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi m√£: " + userId));

        List<Booking> bookings = bookingRepository.findByUserAndBookingDate(user, date);
        return bookings.stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * L·∫•y danh s√°ch ƒë·∫∑t ch·ªó theo tr·∫°ng th√°i v√† ng√†y (d√†nh cho qu·∫£n tr·ªã vi√™n)
     */
    @Transactional(readOnly = true)
    public List<BookingResponse> getBookingsByStatusAndDate(String status, LocalDate date) {
        // Chuy·ªÉn ƒë·ªïi String sang enum
        try {
            Booking.BookingStatus bookingStatus = Booking.BookingStatus.valueOf(status.toUpperCase());
            List<Booking> bookings = bookingRepository.findByBookingStatusAndBookingDate(bookingStatus, date);
            return bookings.stream()
                    .map(this::convertToResponse)
                    .collect(Collectors.toList());
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + status + ". C√°c tr·∫°ng th√°i h·ª£p l·ªá: PENDINGPAYMENT, PENDINGSWAPPING, CANCELLED, COMPLETED");
        }
    }

    /**
     * L·∫•y danh s√°ch ƒë·∫∑t ch·ªó c·ªßa tr·∫°m theo ng√†y
     */
    @Transactional(readOnly = true)
    public List<BookingResponse> getStationBookingsByDate(Integer stationId, LocalDate date) {
        Station station = stationRepository.findById(stationId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y tr·∫°m v·ªõi m√£: " + stationId));

        List<Booking> bookings = bookingRepository.findByStationAndBookingDate(station, date);
        return bookings.stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * C·∫≠p nh·∫≠t ghi ch√∫ cho booking
     */
    public BookingResponse updateBookingNotes(Long bookingId, String notes) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒë·∫∑t pin v·ªõi m√£: " + bookingId));

        // C·∫≠p nh·∫≠t ghi ch√∫
        booking.setNotes(notes);

        Booking savedBooking = bookingRepository.save(booking);
        return convertToResponse(savedBooking);
    }

    /**
     * L·∫•y danh s√°ch xe c·ªßa user
     */
    @Transactional(readOnly = true)
    public List<java.util.Map<String, Object>> getUserVehicles(String userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi m√£: " + userId));

        List<Vehicle> vehicles = vehicleRepository.findByUserAndIsActiveTrueWithOwner(user);

        return vehicles.stream()
                .map(vehicle -> {
                    java.util.Map<String, Object> vehicleMap = new java.util.HashMap<>();
                    vehicleMap.put("vehicleId", vehicle.getVehicleId());
                    vehicleMap.put("VIN", vehicle.getVIN());
                    vehicleMap.put("vehicleType", vehicle.getVehicleType() != null ? vehicle.getVehicleType().toString() : "UNKNOWN");
                    vehicleMap.put("batteryType", vehicle.getBatteryType() != null ? vehicle.getBatteryType().toString() : "UNKNOWN");
                    vehicleMap.put("batteryCount", vehicle.getBatteryCount());
                    vehicleMap.put("licensePlate", vehicle.getLicensePlate());
                    vehicleMap.put("color", vehicle.getColor());
                    vehicleMap.put("ownerName", vehicle.getOwnerName());
                    vehicleMap.put("isActive", vehicle.isActive());
                    vehicleMap.put("manufactureDate", vehicle.getManufactureDate());
                    vehicleMap.put("purchaseDate", vehicle.getPurchaseDate());

                    // T√≠nh gi√° d·ª± ki·∫øn cho vi·ªác thay pin
                    Double estimatedPrice = calculateBookingAmountByVehicleBatteryType(vehicle);
                    vehicleMap.put("estimatedSwapPrice", estimatedPrice);

                    return vehicleMap;
                })
                .collect(Collectors.toList());
    }

    /**
     * L·∫•y th√¥ng tin chi ti·∫øt xe
     */
    @Transactional(readOnly = true)
    public java.util.Map<String, Object> getVehicleDetail(Integer vehicleId) {
        Vehicle vehicle = vehicleRepository.findById(vehicleId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y xe v·ªõi m√£: " + vehicleId));

        java.util.Map<String, Object> vehicleDetail = new java.util.HashMap<>();
        vehicleDetail.put("vehicleId", vehicle.getVehicleId());
        vehicleDetail.put("VIN", vehicle.getVIN());
        vehicleDetail.put("vehicleType", vehicle.getVehicleType() != null ? vehicle.getVehicleType().toString() : "UNKNOWN");
        vehicleDetail.put("batteryType", vehicle.getBatteryType() != null ? vehicle.getBatteryType().toString() : "UNKNOWN");
        vehicleDetail.put("batteryCount", vehicle.getBatteryCount());
        vehicleDetail.put("licensePlate", vehicle.getLicensePlate());
        vehicleDetail.put("color", vehicle.getColor());
        vehicleDetail.put("ownerName", vehicle.getOwnerName());
        vehicleDetail.put("isActive", vehicle.isActive());
        vehicleDetail.put("manufactureDate", vehicle.getManufactureDate());
        vehicleDetail.put("purchaseDate", vehicle.getPurchaseDate());

        // Th√¥ng tin user s·ªü h·ªØu
        if (vehicle.getUser() != null) {
            vehicleDetail.put("userId", vehicle.getUser().getUserId());
            vehicleDetail.put("userName", vehicle.getUser().getFullName());
            vehicleDetail.put("userEmail", vehicle.getUser().getEmail());
        }

        // T√≠nh gi√° d·ª± ki·∫øn cho vi·ªác thay pin
        Double estimatedPrice = calculateBookingAmountByVehicleBatteryType(vehicle);
        vehicleDetail.put("estimatedSwapPrice", estimatedPrice);

        // ===== KI·ªÇM TRA V√Ä HI·ªÇN TH·ªä BOOKING CH∆ØA HO√ÄN TH√ÄNH =====
        boolean hasIncompleteBooking = bookingRepository.hasIncompleteBookingForVehicle(vehicleId);
        vehicleDetail.put("hasIncompleteBooking", hasIncompleteBooking);

        // N·∫øu c√≥ booking ch∆∞a ho√†n th√†nh, l·∫•y th√¥ng tin chi ti·∫øt
        if (hasIncompleteBooking) {
            List<Booking> incompleteBookings = bookingRepository.findIncompleteBookingsByVehicle(vehicleId);
            if (!incompleteBookings.isEmpty()) {
                Booking firstIncomplete = incompleteBookings.get(0);
                java.util.Map<String, Object> incompleteBookingInfo = new java.util.HashMap<>();
                incompleteBookingInfo.put("bookingId", firstIncomplete.getBookingId());
                incompleteBookingInfo.put("status", firstIncomplete.getBookingStatus());
                incompleteBookingInfo.put("bookingDate", firstIncomplete.getBookingDate());
                incompleteBookingInfo.put("timeSlot", firstIncomplete.getTimeSlot());
                incompleteBookingInfo.put("stationName", firstIncomplete.getStation().getStationName());
                incompleteBookingInfo.put("amount", firstIncomplete.getAmount());
                vehicleDetail.put("incompleteBookingInfo", incompleteBookingInfo);
            }
        }
        // =========================================================

        return vehicleDetail;
    }

    /**
     * Ki·ªÉm tra xe c√≥ th·ªÉ booking kh√¥ng
     */
    @Transactional(readOnly = true)
    public boolean validateVehicleForBooking(Integer vehicleId, String userId) {
        try {
            // Ki·ªÉm tra xe t·ªìn t·∫°i
            Vehicle vehicle = vehicleRepository.findById(vehicleId)
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y xe v·ªõi m√£: " + vehicleId));

            // Ki·ªÉm tra xe thu·ªôc v·ªÅ user
            if (vehicle.getUser() == null || !vehicle.getUser().getUserId().equals(userId)) {
                return false;
            }

            // Ki·ªÉm tra xe ƒëang ho·∫°t ƒë·ªông
            if (!vehicle.isActive()) {
                return false;
            }

            // ===== KI·ªÇM TRA XE C√ì BOOKING CH∆ØA HO√ÄN TH√ÄNH =====
            if (bookingRepository.hasIncompleteBookingForVehicle(vehicleId)) {
                return false;
            }
            // ==================================================

            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * L·∫•y danh s√°ch booking c·ªßa xe c·ª• th·ªÉ
     */
    @Transactional(readOnly = true)
    public List<BookingResponse> getVehicleBookings(Integer vehicleId, String userId) {
        Vehicle vehicle = vehicleRepository.findByVehicleIdAndUser_UserId(vehicleId, userId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y xe v·ªõi m√£: " + vehicleId + " thu·ªôc v·ªÅ user: " + userId));

        List<Booking> bookings = bookingRepository.findByVehicle(vehicle);
        return bookings.stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    /**
     * T·∫°o booking nhanh cho xe c·ª• th·ªÉ
     */
    public BookingResponse createQuickBookingForVehicle(Integer vehicleId, String userId, Integer stationId,
                                                       LocalDate bookingDate, String timeSlot) {
        // Validate xe thu·ªôc v·ªÅ user
        Vehicle vehicle = vehicleRepository.findByVehicleIdAndUser_UserId(vehicleId, userId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y xe v·ªõi m√£: " + vehicleId + " thu·ªôc v·ªÅ user: " + userId));

        // T·∫°o booking request
        BookingRequest request = new BookingRequest();
        request.setUserId(userId);
        request.setVehicleId(vehicleId);
        request.setStationId(stationId);
        request.setBookingDate(bookingDate);
        request.setTimeSlot(timeSlot);

        return createBooking(request);
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin xe trong booking (n·∫øu c·∫ßn)
     */
    public BookingResponse updateVehicleInBooking(Long bookingId, Integer newVehicleId, String userId) {
        // L·∫•y booking
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y booking v·ªõi m√£: " + bookingId));

        // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (!booking.getUser().getUserId().equals(userId)) {
            throw new IllegalArgumentException("B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t booking n√†y");
        }

        // Ki·ªÉm tra tr·∫°ng th√°i booking
        if (booking.getBookingStatus() != Booking.BookingStatus.PENDINGPAYMENT) {
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t xe cho booking ƒëang ch·ªù x·ª≠ l√Ω");
        }

        // Validate xe m·ªõi
        Vehicle newVehicle = vehicleRepository.findByVehicleIdAndUser_UserId(newVehicleId, userId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y xe v·ªõi m√£: " + newVehicleId + " thu·ªôc v·ªÅ user: " + userId));

        // C·∫≠p nh·∫≠t xe v√† t√≠nh l·∫°i gi√°
        booking.setVehicle(newVehicle);
        booking.setVehicleType(newVehicle.getVehicleType() != null ? newVehicle.getVehicleType().toString() : "UNKNOWN");
        booking.setAmount(calculateBookingAmountByVehicleBatteryType(newVehicle));

        Booking savedBooking = bookingRepository.save(booking);
        return convertToResponse(savedBooking);
    }

    /**
     * T·∫°o booking sau khi thanh to√°n ho√†n th√†nh - Flow m·ªõi
     */
    public BookingResponse createBookingAfterPayment(PaymentCompletedRequest request) {
        try {
            // Validate th√¥ng tin ƒë·∫ßu v√†o
            validatePaymentRequest(request);

            // L·∫•y th√¥ng tin vehicle v√† user
            Vehicle vehicle = vehicleRepository.findById(request.getVehicleId())
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y xe v·ªõi m√£: " + request.getVehicleId()));

            User user = vehicle.getUser();
            if (user == null) {
                throw new IllegalArgumentException("Xe n√†y ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω cho ng∆∞·ªùi d√πng n√†o.");
            }

            // L·∫•y th√¥ng tin station
            Station station = stationRepository.findById(request.getStationId())
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y tr·∫°m v·ªõi m√£: " + request.getStationId()));

            // Ki·ªÉm tra slot th·ªùi gian c√≥ c√≤n tr·ªëng kh√¥ng
            LocalDate bookingDate = LocalDate.parse(request.getBookingDate());
            LocalTime timeSlot = LocalTime.parse(request.getTimeSlot());

            if (bookingRepository.existsBookingAtTimeSlot(station, bookingDate, timeSlot)) {
                throw new IllegalStateException("Khung gi·ªù n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t tr∆∞·ªõc.");
            }

            // Verify s·ªë ti·ªÅn thanh to√°n c√≥ ƒë√∫ng kh√¥ng
            Double swapPrice = systemPriceService.getPriceByType(SystemPrice.PriceType.BATTERY_SWAP);
            Double expectedAmount = swapPrice * request.getQuantity();
            if (!expectedAmount.equals(request.getPaidAmount())) {
                throw new IllegalArgumentException("S·ªë ti·ªÅn thanh to√°n kh√¥ng ƒë√∫ng. Mong ƒë·ª£i: " + expectedAmount + ", Nh·∫≠n ƒë∆∞·ª£c: " + request.getPaidAmount());
            }

            // T·∫°o booking v·ªõi tr·∫°ng th√°i ƒë√£ thanh to√°n
            Booking booking = Booking.builder()
                    .user(user)
                    .station(station)
                    .vehicle(vehicle)
                    .vehicleType(vehicle.getVehicleType() != null ? vehicle.getVehicleType().toString() : "UNKNOWN")
                    .amount(request.getPaidAmount())
                    .batteryCount(request.getQuantity())
                    .bookingDate(bookingDate)
                    .timeSlot(timeSlot)
                    .bookingStatus(Booking.BookingStatus.PENDINGSWAPPING) // ƒê√£ thanh to√°n, ch·ªù ƒë·ªïi pin
                    .notes("Booking ƒë∆∞·ª£c t·∫°o sau khi thanh to√°n ho√†n th√†nh. Payment ID: " + request.getPaymentId())
                    .build();

            Booking savedBooking = bookingRepository.save(booking);

            // T·∫°o response
            BookingResponse response = convertToResponse(savedBooking);
            response.setMessage("Booking ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng sau thanh to√°n ho√†n th√†nh!");

            return response;

        } catch (Exception e) {
            throw new RuntimeException("L·ªói t·∫°o booking sau thanh to√°n: " + e.getMessage(), e);
        }
    }

    /**
     * Validate th√¥ng tin thanh to√°n
     */
    private void validatePaymentRequest(PaymentCompletedRequest request) {
        if (request.getVehicleId() == null) {
            throw new IllegalArgumentException("Vehicle ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        if (request.getStationId() == null) {
            throw new IllegalArgumentException("Station ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        if (request.getBookingDate() == null || request.getBookingDate().isEmpty()) {
            throw new IllegalArgumentException("Ng√†y booking kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        if (request.getTimeSlot() == null || request.getTimeSlot().isEmpty()) {
            throw new IllegalArgumentException("Khung gi·ªù kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        if (request.getQuantity() == null || request.getQuantity() <= 0) {
            throw new IllegalArgumentException("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0");
        }
        if (request.getPaidAmount() == null || request.getPaidAmount() <= 0) {
            throw new IllegalArgumentException("S·ªë ti·ªÅn thanh to√°n ph·∫£i l·ªõn h∆°n 0");
        }
        if (request.getPaymentId() == null || request.getPaymentId().isEmpty()) {
            throw new IllegalArgumentException("Payment ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
    }

    /**
     * DTO cho request t·∫°o booking sau thanh to√°n
     */
    public static class PaymentCompletedRequest {
        private Integer vehicleId;
        private Integer stationId;
        private String bookingDate; // yyyy-MM-dd
        private String timeSlot; // HH:mm
        private Integer quantity;
        private Double paidAmount;
        private String paymentId;
        private String paymentMethod;

        // Constructors
        public PaymentCompletedRequest() {}

        // Getters and setters
        public Integer getVehicleId() { return vehicleId; }
        public void setVehicleId(Integer vehicleId) { this.vehicleId = vehicleId; }

        public Integer getStationId() { return stationId; }
        public void setStationId(Integer stationId) { this.stationId = stationId; }

        public String getBookingDate() { return bookingDate; }
        public void setBookingDate(String bookingDate) { this.bookingDate = bookingDate; }

        public String getTimeSlot() { return timeSlot; }
        public void setTimeSlot(String timeSlot) { this.timeSlot = timeSlot; }

        public Integer getQuantity() { return quantity; }
        public void setQuantity(Integer quantity) { this.quantity = quantity; }

        public Double getPaidAmount() { return paidAmount; }
        public void setPaidAmount(Double paidAmount) { this.paidAmount = paidAmount; }

        public String getPaymentId() { return paymentId; }
        public void setPaymentId(String paymentId) { this.paymentId = paymentId; }

        public String getPaymentMethod() { return paymentMethod; }
        public void setPaymentMethod(String paymentMethod) { this.paymentMethod = paymentMethod; }
    }

    /**
     * Ki·ªÉm tra time slot ƒë√£ b·ªã ƒë·∫∑t ch∆∞a (cho PaymentService s·ª≠ d·ª•ng)
     */
    @Transactional(readOnly = true)
    public boolean isTimeSlotTaken(Station station, LocalDate date, LocalTime timeSlot) {
        return bookingRepository.existsBookingAtTimeSlot(station, date, timeSlot);
    }

    /**
     * L∆∞u booking tr·ª±c ti·∫øp (d√†nh cho PaymentService sau khi thanh to√°n th√†nh c√¥ng)
     */
    public BookingResponse saveBookingDirectly(Booking booking) {
        Booking savedBooking = bookingRepository.save(booking);

        // T·∫°o response v·ªõi message th√†nh c√¥ng
        BookingResponse response = convertToResponse(savedBooking);
        String createMessage = String.format(
            "Booking #%d ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng sau thanh to√°n! T·ªïng ti·ªÅn: %.0f VND",
            savedBooking.getBookingId(),
            savedBooking.getAmount()
        );
        response.setMessage(createMessage);

        return response;
    }

    /**
     * Ph√¢n t√≠ch v√† chuy·ªÉn ƒë·ªïi ID xe t·ª´ Object sang Integer (c√≥ th·ªÉ null)
     */
    private Integer parseVehicleId(Object vehicleIdObj) {
        if (vehicleIdObj == null) {
            return null;
        }
        if (vehicleIdObj instanceof Integer) {
            return (Integer) vehicleIdObj;
        }
        if (vehicleIdObj instanceof String) {
            String vehicleIdStr = (String) vehicleIdObj;
            if (!vehicleIdStr.isEmpty()) {
                return Integer.valueOf(vehicleIdStr);
            }
        }
        return null;
    }

    /**
     * Ph√¢n t√≠ch v√† chuy·ªÉn ƒë·ªïi ID tr·∫°m t·ª´ Object sang Integer (c√≥ th·ªÉ null)
     */
    private Integer parseStationId(Object stationIdObj) {
        if (stationIdObj == null) {
            return null;
        }
        if (stationIdObj instanceof Integer) {
            return (Integer) stationIdObj;
        }
        if (stationIdObj instanceof String) {
            String stationIdStr = (String) stationIdObj;
            if (!stationIdStr.isEmpty()) {
                return Integer.valueOf(stationIdStr);
            }
        }
        return null;
    }

    /**
     * Convert Booking entity sang BookingResponse DTO (v·ªõi th√¥ng tin subscription)
     */
    private BookingResponse convertToResponse(Booking booking, UserSubscription subscription) {
        BookingResponse response = new BookingResponse();

        // Th√¥ng tin booking c∆° b·∫£n
        response.setBookingId(booking.getBookingId());
        response.setBookingStatus(booking.getBookingStatus().name());
        response.setAmount(booking.getAmount());
        response.setBookingDate(booking.getBookingDate());

        // Chuy·ªÉn ƒë·ªïi LocalTime
        if (booking.getTimeSlot() != null) {
            response.setTimeSlot(LocalTime.parse(booking.getTimeSlot().format(DateTimeFormatter.ofPattern("HH:mm"))));
        }

        // Th√¥ng tin user
        if (booking.getUser() != null) {
            response.setUserId(booking.getUser().getUserId());
            response.setUserName(booking.getUser().getFullName());
        }

        // Th√¥ng tin tr·∫°m
        if (booking.getStation() != null) {
            response.setStationId(booking.getStation().getStationId());
            response.setStationName(booking.getStation().getStationName());
            response.setStationAddress(booking.getStation().getAddress());
        }

        // Th√¥ng tin xe
        if (booking.getVehicle() != null) {
            response.setVehicleId(booking.getVehicle().getVehicleId());
            response.setVehicleVin(booking.getVehicle().getVIN());
            response.setVehicleType(booking.getVehicle().getVehicleType().name());
        }

        // Th√¥ng tin pin
        response.setBatteryCount(booking.getBatteryCount());
        response.setBatteryType(booking.getBatteryType());

        // Th√¥ng tin b·ªï sung
        response.setNotes(booking.getNotes());
        response.setCancellationReason(booking.getCancellationReason());
        response.setCompletedTime(booking.getCompletedTime());

        // Th√¥ng tin h√≥a ƒë∆°n
        if (booking.getInvoice() != null) {
            response.setInvoiceId(String.valueOf(booking.getInvoice().getInvoiceId()));
        }

        // ‚úÖ TH√îNG TIN G√ìI C∆Ø·ªöC (s·ª≠ d·ª•ng subscription ƒë√£ truy·ªÅn v√†o)
        if (subscription != null) {
            SubscriptionPlan plan = subscription.getPlan();

            int limit = (plan.getSwapLimit() == null || plan.getSwapLimit() < 0) ? -1 : plan.getSwapLimit();
            int remaining = limit == -1 ? -1 : limit - subscription.getUsedSwaps();

            response.setIsFreeSwap(true);
            response.setSubscriptionPlanName(plan.getPlanName());
            response.setRemainingSwaps(remaining);
            response.setTotalSwapLimit(limit);
        } else {
            response.setIsFreeSwap(false);
            response.setSubscriptionPlanName(null);
            response.setRemainingSwaps(null);
            response.setTotalSwapLimit(null);
        }

        // Th√¥ng tin thanh to√°n
        if (booking.getInvoice() != null && booking.getInvoice().getPayments() != null) {
            Payment paymentToShow = booking.getInvoice().getPayments().stream()
                    .filter(p -> p.getPaymentStatus() == Payment.PaymentStatus.SUCCESS)
                    .findFirst()
                    .orElse(
                            booking.getInvoice().getPayments().stream()
                                    .max(Comparator.comparing(Payment::getCreatedAt))
                                    .orElse(null)
                    );

            if (paymentToShow != null) {
                BookingResponse.PaymentInfo paymentInfoDTO = new BookingResponse.PaymentInfo();
                paymentInfoDTO.setPaymentId(paymentToShow.getPaymentId());
                paymentInfoDTO.setPaymentMethod(paymentToShow.getPaymentMethod().name());
                paymentInfoDTO.setAmount(paymentToShow.getAmount());
                paymentInfoDTO.setPaymentStatus(paymentToShow.getPaymentStatus().name());

                if (paymentToShow.getCreatedAt() != null) {
                    paymentInfoDTO.setPaymentDate(paymentToShow.getCreatedAt());
                }

                response.setPayment(paymentInfoDTO);
            } else {
                response.setPayment(null);
            }
        } else {
            response.setPayment(null);
        }

        return response;
    }

    /**
     * Overload method c≈© ƒë·ªÉ backward compatibility
     */
    private BookingResponse convertToResponse(Booking booking) {
        return convertToResponse(booking, null);
    }


    /**
     * T√≠nh to√°n gi√° ti·ªÅn ƒë·∫∑t ch·ªó d·ª±a tr√™n SystemPrice - TH·ªêNG NH·∫§T CHO T·∫§T C·∫¢
     */
    private Double calculateBookingAmountByVehicleBatteryType(Vehicle vehicle) {
        // L·∫•y gi√° th·ªëng nh·∫•t t·ª´ SystemPrice (kh√¥ng ph√¢n bi·ªát lo·∫°i pin)
        double basePrice = systemPriceService.getPriceByType(SystemPrice.PriceType.BATTERY_SWAP);

        // Nh√¢n v·ªõi s·ªë l∆∞·ª£ng pin c·ªßa xe (n·∫øu c√≥)
        Integer batteryCount = vehicle.getBatteryCount();
        if (batteryCount != null && batteryCount > 0) {
            return basePrice * batteryCount;
        }

        return basePrice;
    }

    // ƒê·∫£m b·∫£o h√†m n√†y t·ªìn t·∫°i ƒë√∫ng ch·ªØ k√Ω public
    public java.util.Map<String, Object> createInvoiceFromVehicles(java.util.List<java.util.Map<String, Object>> vehicleBatteryData) {
        throw new UnsupportedOperationException("Ch∆∞a tri·ªÉn khai logic ·ªü ƒë√¢y. H√£y copy logic t·ª´ phi√™n b·∫£n ƒë√£ ch·ªânh s·ª≠a tr∆∞·ªõc ƒë√≥ n·∫øu c·∫ßn.");
    }

    /**
     * X·ª≠ l√Ω batch booking: l·∫∑p qua t·ª´ng BookingRequest, √°p d·ª•ng ki·ªÉm tra tr√πng l·∫∑p nh∆∞ createBooking
     */
    public List<BookingResponse> createBatchBooking(List<BookingRequest> requests) {
        List<BookingResponse> responses = new ArrayList<>();
        for (BookingRequest request : requests) {
            try {
                BookingResponse response = createBooking(request); // √Åp d·ª•ng to√†n b·ªô ki·ªÉm tra tr√πng l·∫∑p
                responses.add(response);
            } catch (Exception e) {
                BookingResponse errorResponse = new BookingResponse();
                errorResponse.setMessage("Booking th·∫•t b·∫°i: " + e.getMessage());
                errorResponse.setBookingStatus("FAILED");
                responses.add(errorResponse);
            }
        }
        return responses;
    }

    /**
     * T·∫°o flexible batch booking - G·ªòP H√ìA ƒê∆†N
     * N·∫øu 1 booking l·ªói, to√†n b·ªô batch s·∫Ω rollback.
     */
    @Transactional(rollbackFor = Exception.class)
    public Map<String, Object> createFlexibleBatchBooking(FlexibleBatchBookingRequest request) {

        // (L·∫•y UserID t·ª´ request.getUserId())
        String userId = request.getUserId();
        if (userId == null || userId.isBlank()) {
            throw new IllegalArgumentException("UserId l√† b·∫Øt bu·ªôc cho batch booking.");
        }
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y User: " + userId));

        log.info("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Batch Booking cho UserID: {}", user.getUserId());

        // ========== [L∆Ø·ª¢T 1: KI·ªÇM TRA & T√çNH TO√ÅN] ==========
        // (Ph·∫ßn n√†y gi·ªØ nguy√™n 100% - n√≥ ƒë√£ ho·∫°t ƒë·ªông ƒë√∫ng)

        Double standardSwapPrice = systemPriceService.getPriceByType(SystemPrice.PriceType.BATTERY_SWAP);
        if (standardSwapPrice == null) {
            log.error("L·ªñI H·ªÜ TH·ªêNG: Kh√¥ng t√¨m th·∫•y gi√° 'BATTERY_SWAP' trong systemprice.");
            throw new IllegalStateException("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh gi√° ƒë·ªïi pin. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.");
        }
        Optional<UserSubscription> activeSubOpt = userSubscriptionRepository.findActiveSubscriptionForUser(
                user.getUserId(), UserSubscription.SubscriptionStatus.ACTIVE, LocalDateTime.now()
        );
        double totalCost = 0.0;
        int totalSwapsNeeded = 0;
        int currentUsedSwaps = 0;
        int currentSwapLimit = 0;
        boolean hasActivePlan = false;
        if (activeSubOpt.isPresent()) {
            UserSubscription sub = activeSubOpt.get();
            SubscriptionPlan plan = sub.getPlan();
            if (plan != null) {
                hasActivePlan = true;
                currentUsedSwaps = sub.getUsedSwaps();
                currentSwapLimit = (plan.getSwapLimit() == null || plan.getSwapLimit() < 0) ? 0 : plan.getSwapLimit();
            } else {
                log.warn("UserSubscription #{} kh√¥ng c√≥ 'plan' (plan=null). Coi nh∆∞ kh√¥ng c√≥ g√≥i.", sub.getId());
            }
        }
        List<BookingDataHelper> validatedBookings = new ArrayList<>();
        for (BookingRequest req : request.getBookings()) {
            Station station = stationRepository.findById(req.getStationId())
                    .orElseThrow(() -> new EntityNotFoundException("Tr·∫°m kh√¥ng t·ªìn t·∫°i: " + req.getStationId()));
            Vehicle vehicle = vehicleRepository.findById(req.getVehicleId())
                    .orElseThrow(() -> new EntityNotFoundException("Xe kh√¥ng t·ªìn t·∫°i: " + req.getVehicleId()));
            if (!vehicle.getUser().getUserId().equals(user.getUserId())) {
                throw new IllegalStateException("Xe " + vehicle.getVIN() + " kh√¥ng thu·ªôc v·ªÅ user " + user.getUserId());
            }
            LocalTime timeSlot = LocalTime.parse(req.getTimeSlot(), DateTimeFormatter.ofPattern("HH:mm"));
            if (bookingRepository.hasIncompleteBookingForVehicle(vehicle.getVehicleId())) {
                throw new IllegalStateException("Xe " + vehicle.getVIN() + " ƒëang c√≥ booking ch∆∞a ho√†n th√†nh.");
            }
            Integer reqCount = (req.getBatteryCount() != null) ? req.getBatteryCount() : vehicle.getBatteryCount();
            Integer alreadyBooked = bookingRepository.getBookedBatteryCountAtTimeSlot(station, req.getBookingDate(), timeSlot);
            if (alreadyBooked == null) alreadyBooked = 0;
            if ((alreadyBooked + reqCount) > station.getDocks().size()) {
                throw new IllegalStateException("Tr·∫°m " + station.getStationName() + " ƒë√£ h·∫øt ch·ªó v√†o " + timeSlot);
            }
            boolean isFree = false;
            String batteryTypeStr = (req.getBatteryType() != null && !req.getBatteryType().isBlank())
                    ? req.getBatteryType()
                    : (vehicle.getBatteryType() != null ? vehicle.getBatteryType().toString() : "UNKNOWN");
            String vehicleTypeStr = vehicle.getVehicleType() != null ? vehicle.getVehicleType().toString() : "UNKNOWN";
            if (hasActivePlan && (currentUsedSwaps + totalSwapsNeeded + reqCount) <= currentSwapLimit) {
                isFree = true;
                totalSwapsNeeded += reqCount;
            } else {
                isFree = false;
                totalCost += (standardSwapPrice * reqCount);
            }
            validatedBookings.add(new BookingDataHelper(
                    req, station, vehicle, timeSlot,
                    reqCount, isFree, (isFree ? 0.0 : standardSwapPrice * reqCount),
                    batteryTypeStr, vehicleTypeStr
            ));
        }


        // ========== [L∆Ø·ª¢T 2: S·ª¨A L·ªñI LOGIC G·ªòP INVOICE] ==========

        String paymentMethodRequest = request.getPaymentMethod();
        Payment.PaymentMethod paymentMethodEnum = null;
        Payment.PaymentStatus paymentStatusEnum = null;
        Invoice.InvoiceStatus invoiceStatusEnum = Invoice.InvoiceStatus.PENDING;

        // 1. X·ª≠ l√Ω thanh to√°n 1 L·∫¶N DUY NH·∫§T
        if (totalCost > 0) {
            log.info("Batch booking, t·ªïng chi ph√≠: {}. ƒêang x·ª≠ l√Ω thanh to√°n...", totalCost);
            if (paymentMethodRequest == null || paymentMethodRequest.isBlank()) {
                throw new IllegalArgumentException("Batch n√†y c√≥ t√≠nh ph√≠. Ph∆∞∆°ng th·ª©c thanh to√°n l√† b·∫Øt bu·ªôc (WALLET ho·∫∑c VNPAY).");
            }
            if (paymentMethodRequest.equalsIgnoreCase("WALLET")) {
                Double userWallet = user.getWalletBalance();
                if (userWallet < totalCost) {
                    throw new IllegalStateException(String.format(
                            "S·ªë d∆∞ v√≠ kh√¥ng ƒë·ªß. C·∫ßn %.0f, s·ªë d∆∞: %.0f", totalCost, userWallet
                    ));
                }
                user.setWalletBalance(userWallet - totalCost);

                // ‚úÖ [S·ª¨A V·∫§N ƒê·ªÄ 3] - D√≤ng n√†y B·∫ÆT BU·ªòC ph·∫£i c√≥
                userRepository.save(user);

                paymentMethodEnum = Payment.PaymentMethod.WALLET;
                paymentStatusEnum = Payment.PaymentStatus.SUCCESS;
                invoiceStatusEnum = Invoice.InvoiceStatus.PAID;
            } else if (paymentMethodRequest.equalsIgnoreCase("VNPAY")) {
                paymentMethodEnum = Payment.PaymentMethod.VNPAY;
                paymentStatusEnum = Payment.PaymentStatus.PENDING;
                invoiceStatusEnum = Invoice.InvoiceStatus.PENDING;
            } else {
                throw new IllegalArgumentException("Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá: " + paymentMethodRequest);
            }
        } else {
            log.info("Batch booking, t·ªïng chi ph√≠: 0.0 (G√≥i c∆∞·ªõc).");
            invoiceStatusEnum = Invoice.InvoiceStatus.PAID;
        }

        // 2. Tr·ª´ l∆∞·ª£t g√≥i c∆∞·ªõc (1 L·∫¶N DUY NH·∫§T)
        if (totalSwapsNeeded > 0 && activeSubOpt.isPresent()) {
            UserSubscription sub = activeSubOpt.get();
            sub.setUsedSwaps(sub.getUsedSwaps() + totalSwapsNeeded);
            userSubscriptionRepository.save(sub);
            log.info("ƒê√£ tr·ª´ {} l∆∞·ª£t g√≥i c∆∞·ªõc cho batch. T·ªïng l∆∞·ª£t ƒë√£ d√πng: {}", totalSwapsNeeded, sub.getUsedSwaps());
        }

        // 3. T·∫†O 1 INVOICE CHUNG
        Invoice masterInvoice = new Invoice();
        masterInvoice.setUserId(user.getUserId());
        masterInvoice.setTotalAmount(totalCost);
        masterInvoice.setCreatedDate(LocalDateTime.now());
        masterInvoice.setInvoiceStatus(invoiceStatusEnum);
        int totalSwapsInBatch = validatedBookings.stream().mapToInt(b -> b.batteryCount).sum();
        masterInvoice.setNumberOfSwaps(totalSwapsInBatch);
        masterInvoice.setInvoiceType(Invoice.InvoiceType.BOOKING);

        // ‚úÖ [S·ª¨A V·∫§N ƒê·ªÄ 1] - Th√™m gi√° c∆° b·∫£n (15000)
        masterInvoice.setPricePerSwap(standardSwapPrice);

        Invoice savedMasterInvoice = invoiceRepository.save(masterInvoice);

        // 4. T·∫†O 1 PAYMENT CHUNG (k·ªÉ c·∫£ khi l√† g√≥i Subscription)
        if (totalCost > 0 && paymentMethodEnum != null) {
            // C√≥ ph√≠ (WALLET ho·∫∑c VNPAY)
            Payment masterPayment = Payment.builder()
                    .invoice(savedMasterInvoice)
                    .amount(totalCost)
                    .paymentMethod(paymentMethodEnum)
                    .paymentStatus(paymentStatusEnum)
                    .transactionType(Payment.TransactionType.PAYMENT)
                    .createdAt(LocalDateTime.now())
                    .gateway(paymentMethodEnum == Payment.PaymentMethod.WALLET ? "WALLET" : "VNPAY")
                    .build();
            paymentRepository.save(masterPayment);

        } else if (totalCost == 0 && activeSubOpt.isPresent()) {
            // üîπ Tr∆∞·ªùng h·ª£p MI·ªÑN PH√ç b·∫±ng g√≥i Subscription
            UserSubscription sub = activeSubOpt.get();
            Payment subscriptionPayment = Payment.builder()
                    .invoice(savedMasterInvoice)
                    .amount(0.0)
                    .paymentMethod(Payment.PaymentMethod.SUBSCRIPTION)
                    .paymentStatus(Payment.PaymentStatus.SUCCESS)
                    .transactionType(Payment.TransactionType.PAYMENT)
                    .gateway("SUBSCRIPTION")
                    .message("Thanh to√°n b·∫±ng g√≥i c∆∞·ªõc " + sub.getPlan().getPlanName())
                    .createdAt(LocalDateTime.now())
                    .build();
            paymentRepository.save(subscriptionPayment);
        }


        // 5. L∆ØU T·∫§T C·∫¢ BOOKING
        List<BookingResponse> successBookings = new ArrayList<>();
        for (BookingDataHelper helper : validatedBookings) {
            Booking booking = Booking.builder()
                    .user(user)
                    .station(helper.station)
                    .vehicle(helper.vehicle)
                    .amount(helper.price)
                    .totalPrice(helper.price)
                    .bookingDate(helper.request.getBookingDate())
                    .timeSlot(helper.timeSlot)
                    .batteryCount(helper.batteryCount)
                    .batteryType(helper.batteryType)
                    .vehicleType(helper.vehicleType)
                    .bookingStatus(helper.isFree ? Booking.BookingStatus.PENDINGSWAPPING :
                            (invoiceStatusEnum == Invoice.InvoiceStatus.PAID ? Booking.BookingStatus.PENDINGSWAPPING : Booking.BookingStatus.PENDINGPAYMENT))
                    .invoice(savedMasterInvoice) // <-- Li√™n k·∫øt t·ªõi Invoice chung
                    .notes(helper.request.getNotes() != null ? helper.request.getNotes() : "Batch booking")
                    .build();
            Booking savedBooking = bookingRepository.save(booking);
            successBookings.add(convertToResponse(savedBooking, (helper.isFree ? activeSubOpt.orElse(null) : null)));
        }

        // 6. Tr·∫£ v·ªÅ Response
        Map<String, Object> result = new HashMap<>();
        result.put("message", String.format("ƒê·∫∑t l·ªãch th√†nh c√¥ng cho %d xe.", successBookings.size()));
        result.put("totalAmount", totalCost);
        result.put("totalSwapsUsed", totalSwapsNeeded);
        result.put("paymentMethod", paymentMethodRequest);
        result.put("bookings", successBookings);

        return result;
    }

    /**
     * L·ªõp/Record n·ªôi b·ªô (Helper) ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu ƒë√£ x√°c th·ª±c ·ªü L∆∞·ª£t 1
     */
    private record BookingDataHelper(
            BookingRequest request,
            Station station,
            Vehicle vehicle,
            LocalTime timeSlot,
            int batteryCount,
            boolean isFree,
            double price,
            String batteryType,
            String vehicleType
    ) {}


    /**
     * X√≥a m·ªôt ho·∫∑c nhi·ªÅu booking c√πng l√∫c (b·∫•t k·ªÉ tr·∫°ng th√°i)
     * ƒê√¢y l√† API x√≥a duy nh·∫•t, x·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p 1 ID v√† nhi·ªÅu ID.
     * @param bookingIds Danh s√°ch ID c·ªßa c√°c booking c·∫ßn x√≥a
     * @return Map ch·ª©a s·ªë l∆∞·ª£ng ƒë√£ x√≥a (deleted) v√† kh√¥ng t√¨m th·∫•y (notFound)
     */
    @Transactional
    public Map<String, Integer> deleteBookings(List<Long> bookingIds) {
        if (bookingIds == null || bookingIds.isEmpty()) {
            // Tr·∫£ v·ªÅ map r·ªóng n·∫øu kh√¥ng c√≥ g√¨ ƒë·ªÉ l√†m
            return Map.of("deleted", 0, "notFound", 0);
        }

        // 1. T√¨m t·∫•t c·∫£ booking h·ª£p l·ªá t·ª´ danh s√°ch ID
        List<Booking> bookingsToDelete = bookingRepository.findAllById(bookingIds);

        int foundCount = bookingsToDelete.size();
        int notFoundCount = bookingIds.size() - foundCount;

        if (bookingsToDelete.isEmpty()) {
            // Kh√¥ng t√¨m th·∫•y booking n√†o
            return Map.of("deleted", 0, "notFound", notFoundCount);
        }

        // 2. L·∫•y ra danh s√°ch (Set) c√°c Invoice duy nh·∫•t b·ªã ·∫£nh h∆∞·ªüng
        Set<Invoice> affectedInvoices = bookingsToDelete.stream()
                .map(Booking::getInvoice)   // L·∫•y invoice c·ªßa t·ª´ng booking
                .filter(Objects::nonNull) // B·ªè qua c√°c booking kh√¥ng c√≥ invoice
                .collect(Collectors.toSet()); // Thu th·∫≠p l·∫°i (Set s·∫Ω t·ª± l·ªçc tr√πng)

        // 3. G·ª° link booking kh·ªèi invoice (trong b·ªô nh·ªõ)
        // C·∫ßn l√†m ƒëi·ªÅu n√†y TR∆Ø·ªöC KHI x√≥a
        for (Booking booking : bookingsToDelete) {
            if (booking.getInvoice() != null) {
                // G·ª° link kh·ªèi collection c·ªßa Invoice
                booking.getInvoice().getBookings().remove(booking);
                // G·ª° link kh·ªèi ch√≠nh booking
                booking.setInvoice(null);
            }
        }

        // 4. X√≥a t·∫•t c·∫£ booking trong 1 c√¢u l·ªánh
        bookingRepository.deleteAll(bookingsToDelete);

        // 5. T√≠nh to√°n l·∫°i c√°c invoice ƒë√£ b·ªã ·∫£nh h∆∞·ªüng
        for (Invoice invoice : affectedInvoices) {
            // H√†m n√†y s·∫Ω t√≠nh l·∫°i d·ª±a tr√™n 'invoice.getBookings()' ƒë√£ b·ªã gi·∫£m
            invoice.calculateTotalAmount();
            invoiceRepository.save(invoice);
        }

        // 6. Tr·∫£ v·ªÅ k·∫øt qu·∫£
        return Map.of("deleted", foundCount, "notFound", notFoundCount);
    }

    @Transactional
    public Map<String, Object> cancelBookingWithRefund(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y booking #" + bookingId));

        // üî∏ N·∫øu ch∆∞a thanh to√°n th√¨ ch·ªâ h·ªßy booking
        if (booking.getInvoice() == null
                || booking.getInvoice().getInvoiceStatus() != Invoice.InvoiceStatus.PAID) {
            booking.setBookingStatus(Booking.BookingStatus.CANCELLED);
            booking.setCancellationReason("H·ªßy booking ch∆∞a thanh to√°n.");
            bookingRepository.save(booking);
            return Map.of(
                    "bookingId", bookingId,
                    "status", "CANCELLED",
                    "message", "ƒê√£ h·ªßy booking (ch∆∞a thanh to√°n)"
            );
        }

        // üîπ N·∫øu h√≥a ƒë∆°n ƒë√£ thanh to√°n ‚Üí g·ªçi refund VNPay
        Map<String, Object> refundResult = paymentService.refundBooking(String.valueOf(bookingId));

        // ‚úÖ T√¨m payment t∆∞∆°ng ·ª©ng v·ªõi booking ƒë·ªÉ set REFUNDED
        Invoice invoice = booking.getInvoice();
        if (invoice != null && invoice.getPayments() != null) {
            invoice.getPayments().stream()
                    .filter(p -> p.getPaymentStatus() == Payment.PaymentStatus.SUCCESS)
                    .reduce((first, second) -> second)
                    .ifPresent(p -> {
                        p.setPaymentStatus(Payment.PaymentStatus.REFUNDED);
                        p.setMessage("ƒê√£ ho√†n ti·ªÅn cho booking #" + bookingId);
                    });
        }

        // ‚úÖ Booking ch·ªâ set CANCELLED
        booking.setBookingStatus(Booking.BookingStatus.CANCELLED);
        booking.setCancellationReason("ƒê√£ h·ªßy v√† ho√†n ti·ªÅn VNPay.");
        bookingRepository.save(booking);

        return Map.of(
                "bookingId", bookingId,
                "status", "CANCELLED",
                "message", "ƒê√£ h·ªßy booking v√† ho√†n ti·ªÅn th√†nh c√¥ng",
                "refundResult", refundResult
        );
    }


    /**
     * L·∫•y danh s√°ch booking theo tr·∫°ng th√°i
     */
    @Transactional(readOnly = true)
    public List<BookingResponse> getBookingsByStatus(String status) {
        // Chuy·ªÉn ƒë·ªïi String sang enum
        try {
            Booking.BookingStatus bookingStatus = Booking.BookingStatus.valueOf(status.toUpperCase());
            List<Booking> bookings = bookingRepository.findByBookingStatus(bookingStatus);
            return bookings.stream()
                    .map(this::convertToResponse)
                    .collect(Collectors.toList());
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + status + ". C√°c tr·∫°ng th√°i h·ª£p l·ªá: PENDINGPAYMENT, PENDINGSWAPPING, CANCELLED, COMPLETED");
        }
    }

    /**
     * [S·ª¨A L·ªñI V√íNG L·∫∂P]
     * H√†m n√†y L·∫ÆNG NGHE s·ª± ki·ªán 'InvoicePaidEvent' (ƒë∆∞·ª£c b·∫Øn ra t·ª´ SubscriptionService HO·∫∂C PaymentService).
     * Khi n√≥ nghe th·∫•y, n√≥ s·∫Ω t·ª± ƒë·ªông k√≠ch ho·∫°t Booking.
     */
    @EventListener
    public void handleInvoicePaidEvent(InvoicePaidEvent event) {
            Invoice invoice = event.getInvoice();
            log.info("BookingService ƒë√£ nh·∫≠n ƒë∆∞·ª£c InvoicePaidEvent cho Invoice #{}", invoice.getInvoiceId());

        // T√¨m c√°c booking li√™n quan ƒë·∫øn h√≥a ƒë∆°n n√†y
        List<Booking> bookings = bookingRepository.findByInvoice(invoice);
        if (bookings.isEmpty()) {
            // (N·∫øu ƒë√¢y l√† Invoice G√≥i th√°ng, n√≥ s·∫Ω kh√¥ng c√≥ booking n√†o, ƒë√¢y l√† vi·ªác b√¨nh th∆∞·ªùng)
            log.info("S·ª± ki·ªán Invoice PAID, kh√¥ng t√¨m th·∫•y Booking n√†o li√™n k·∫øt (c√≥ th·ªÉ l√† Hƒê G√≥i th√°ng). B·ªè qua.");
            return;
        }

        for (Booking booking : bookings) {
            // Ch·ªâ k√≠ch ho·∫°t c√°c booking ƒëang ch·ªù thanh to√°n
            if (booking.getBookingStatus() == Booking.BookingStatus.PENDINGPAYMENT) {
                log.info("K√≠ch ho·∫°t Booking #{} (t·ª´ s·ª± ki·ªán) sang PENDINGSWAPPING", booking.getBookingId());

                // G·ªçi h√†m confirmPayment (D√≤ng 307 trong file n√†y)
                confirmPayment(booking.getBookingId());
            }
        }
    }

    /**
     * Ch·ªâ ƒë·ªãnh ph∆∞∆°ng th·ª©c thanh to√°n.
     * Ng∆∞·ªùi d√πng ph·∫£i g·ª≠i: "WALLET" ho·∫∑c "VNPAY"
     * (N·∫øu d√πng g√≥i c∆∞·ªõc 0 ƒë·ªìng, tr∆∞·ªùng n√†y c√≥ th·ªÉ b·ªè qua)
     */
    @Setter
    @Getter
    private String paymentMethod;


}


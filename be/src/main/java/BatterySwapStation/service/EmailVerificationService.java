package BatterySwapStation.service;

import BatterySwapStation.entity.EmailVerificationToken;
import BatterySwapStation.entity.User;
import BatterySwapStation.repository.EmailVerificationTokenRepository;
import BatterySwapStation.repository.UserRepository;
import io.jsonwebtoken.ExpiredJwtException;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class EmailVerificationService {

    private final EmailVerificationTokenRepository tokenRepo;
    private final UserRepository userRepo;
    private final JwtService jwtService;


    public String createVerificationToken(User user) {
        String uuidToken = UUID.randomUUID().toString();

        EmailVerificationToken verificationToken = EmailVerificationToken.builder()
                .user(user)
                .token(uuidToken)
                .tokenType(EmailVerificationToken.TokenType.VERIFY_EMAIL)
                .createdAt(LocalDateTime.now())
                .expiresAt(LocalDateTime.now().plusMinutes(30))
                .isUsed(false)
                .build();

        tokenRepo.save(verificationToken);

        // üîπ Tr·∫£ JWT token ch·ª©a email, d√πng ƒë·ªÉ verify link FE
        return jwtService.generateVerifyEmailToken(user.getEmail());
    }


    @Transactional
    public String verifyEmail(String token) {
        String email;

        // 1Ô∏è‚É£ Check token h·ª£p l·ªá & ch∆∞a h·∫øt h·∫°n
        try {
            email = jwtService.extractEmailStrict(token); // üëâ d√πng strict ƒë·ªÉ ch·∫∑n expired
        } catch (ExpiredJwtException ex) {
            throw new RuntimeException("Li√™n k·∫øt x√°c th·ª±c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i email x√°c minh.");
        } catch (Exception e) {
            throw new RuntimeException("Li√™n k·∫øt x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã thay ƒë·ªïi!");
        }

        // 2Ô∏è‚É£ L·∫•y user t∆∞∆°ng ·ª©ng
        User user = userRepo.findByEmail(email);
        if (user == null) {
            throw new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
        }

        if (user.isVerified()) {
            throw new RuntimeException("T√†i kho·∫£n n√†y ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c tr∆∞·ªõc ƒë√≥!");
        }

        // 3Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i user
        user.setVerified(true);
        userRepo.save(user);

        // 4Ô∏è‚É£ ƒê√°nh d·∫•u c√°c token c≈© l√† used
        List<EmailVerificationToken> tokens = tokenRepo.findAllByUser(user);
        for (EmailVerificationToken t : tokens) {
            if (!t.isUsed()) {
                t.setUsed(true);
            }
        }
        tokenRepo.saveAll(tokens);

        // 5Ô∏è‚É£ Tr·∫£ k·∫øt qu·∫£ th√†nh c√¥ng
        return "T√†i kho·∫£n " + email + " ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng!";
    }

    public User getUserByEmail(String email) {
        User user = userRepo.findByEmail(email);
        if (user == null) {
            throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: " + email);
        }
        return user;
    }
}

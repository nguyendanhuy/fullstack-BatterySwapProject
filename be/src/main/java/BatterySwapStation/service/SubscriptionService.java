package BatterySwapStation.service;

import BatterySwapStation.dto.SubscriptionRequest;
import BatterySwapStation.dto.UseSwapRequest;
import BatterySwapStation.entity.*;
import BatterySwapStation.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import lombok.extern.slf4j.Slf4j;

import jakarta.persistence.EntityNotFoundException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Slf4j
@RequiredArgsConstructor
public class SubscriptionService {


    private final UserRepository userRepository;
    private final UserSubscriptionRepository userSubscriptionRepository;
    private final InvoiceRepository invoiceRepository;
    private final SystemPriceService systemPriceService;
    private final SubscriptionPlanRepository subscriptionPlanRepository;
    private final BookingRepository bookingRepository;
    private final ApplicationEventPublisher eventPublisher;
    private final PaymentRepository paymentRepository;



    @Transactional
    public Invoice createSubscriptionInvoice(SubscriptionRequest request) {

        // --- 1Ô∏è‚É£ VALIDATION ---
        User user = userRepository.findById(request.getUserId())
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y User ID: " + request.getUserId()));

        SubscriptionPlan plan = subscriptionPlanRepository.findById(request.getPlanId())
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y G√≥i c∆∞·ªõc ID: " + request.getPlanId()));

        // Ki·ªÉm tra g√≥i ƒëang active
        Optional<UserSubscription> activeSub = userSubscriptionRepository.findActiveSubscriptionForUser(
                request.getUserId(),
                UserSubscription.SubscriptionStatus.ACTIVE,
                LocalDateTime.now()
        );

        if (activeSub.isPresent()) {
            throw new IllegalStateException("B·∫°n ƒë√£ c√≥ m·ªôt g√≥i c∆∞·ªõc ƒëang ho·∫°t ƒë·ªông. " +
                    "Kh√¥ng th·ªÉ ƒëƒÉng k√Ω g√≥i m·ªõi cho ƒë·∫øn khi g√≥i c≈© h·∫øt h·∫°n.");
        }

        // --- 2Ô∏è‚É£ L·∫§Y GI√Å ---
        Double planPrice = systemPriceService.getPriceByType(plan.getPriceType());
        if (planPrice == null) {
            throw new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y gi√° cho " + plan.getPriceType());
        }

        // --- 3Ô∏è‚É£ KH·ªûI T·∫†O INVOICE ---
        Invoice invoice = new Invoice();
        invoice.setUserId(user.getUserId());
        invoice.setCreatedDate(LocalDateTime.now());
        invoice.setPlanToActivate(plan);
        invoice.setNumberOfSwaps(0);
        invoice.setInvoiceType(Invoice.InvoiceType.SUBSCRIPTION);

        // --- 4Ô∏è‚É£ X·ª¨ L√ù THANH TO√ÅN ---
        String method = request.getPaymentMethod(); // "WALLET" ho·∫∑c "VNPAY"
        if (method == null || method.isBlank()) {
            throw new IllegalArgumentException("Ph∆∞∆°ng th·ª©c thanh to√°n l√† b·∫Øt bu·ªôc (WALLET ho·∫∑c VNPAY).");
        }

        if (method.equalsIgnoreCase("WALLET")) {
            // üü¢ THANH TO√ÅN QUA V√ç
            Double balance = Optional.ofNullable(user.getWalletBalance()).orElse(0.0);

            // üõ°Ô∏è KI·ªÇM TRA V√ç B·ªä OVERFLOW - KH√îNG RESET M√Ä T·ª™ CH·ªêI GIAO D·ªäCH
            if (balance > 1_000_000_000) { // 1 t·ªâ VNƒê
                log.error("üö® [WALLET ERROR] Ph√°t hi·ªán v√≠ b·ªã overflow: balance={} cho user {}", balance, user.getUserId());
                throw new IllegalStateException(String.format(
                    "V√≠ c·ªßa b·∫°n hi·ªán c√≥ v·∫•n ƒë·ªÅ (s·ªë d∆∞: %.0f VNƒê v∆∞·ª£t qu√° gi·ªõi h·∫°n b√¨nh th∆∞·ªùng). " +
                    "Vui l√≤ng li√™n h·ªá h·ªó tr·ª£ ƒë·ªÉ kh·∫Øc ph·ª•c tr∆∞·ªõc khi th·ª±c hi·ªán giao d·ªãch.",
                    balance
                ));
            }

            if (balance < planPrice) {
                throw new IllegalStateException(String.format(
                        "S·ªë d∆∞ v√≠ kh√¥ng ƒë·ªß ƒë·ªÉ mua g√≥i %s. C·∫ßn: %.0f, Hi·ªán c√≥: %.0f",
                        plan.getPlanName(), planPrice, balance
                ));
            }

            // Tr·ª´ ti·ªÅn v√≠
            double newBalance = balance - planPrice;
            if (newBalance < 0) {
                throw new IllegalStateException("S·ªë d∆∞ v√≠ sau giao d·ªãch kh√¥ng th·ªÉ √¢m");
            }

            user.setWalletBalance(newBalance);
            userRepository.save(user);

            // ƒê√°nh d·∫•u invoice ƒë√£ thanh to√°n
            invoice.setInvoiceStatus(Invoice.InvoiceStatus.PAID);
            invoice.setTotalAmount(planPrice);
            Invoice savedInvoice = invoiceRepository.save(invoice);

            // Ghi l·∫°i payment th√†nh c√¥ng (WALLET)
            Payment payment = Payment.builder()
                    .invoice(savedInvoice)
                    .amount(planPrice)
                    .paymentMethod(Payment.PaymentMethod.WALLET)
                    .paymentStatus(Payment.PaymentStatus.SUCCESS)
                    .transactionType(Payment.TransactionType.PAYMENT)
                    .message("Thanh to√°n g√≥i c∆∞·ªõc " + plan.getPlanName() + " b·∫±ng v√≠ ng∆∞·ªùi d√πng.")
                    .createdAt(LocalDateTime.now())
                    .build();
            paymentRepository.save(payment);

            // K√≠ch ho·∫°t g√≥i lu√¥n sau khi tr·ª´ v√≠
            log.info("‚úÖ [SUBSCRIPTION WALLET] User {} mua g√≥i {} b·∫±ng v√≠ th√†nh c√¥ng.", user.getUserId(), plan.getPlanName());
            this.activateSubscription(savedInvoice);
            return savedInvoice;

        } else if (method.equalsIgnoreCase("VNPAY")) {
            // üü† THANH TO√ÅN QUA VNPAY
            invoice.setInvoiceStatus(Invoice.InvoiceStatus.PENDING);
            invoice.setTotalAmount(planPrice);
            Invoice savedInvoice = invoiceRepository.save(invoice);


            log.info("üü° [SUBSCRIPTION VNPAY] Invoice #{} ch·ªù thanh to√°n qua VNPay.", savedInvoice.getInvoiceId());
            return savedInvoice;
        } else {
            throw new IllegalArgumentException("Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá: " + method);
        }
    }



    /**
     * K√≠ch ho·∫°t g√≥i c∆∞·ªõc sau khi thanh to√°n th√†nh c√¥ng.
     * (Gi·ªØ nguy√™n logic m·ªõi c·ªßa b·∫°n)
     */
    @Transactional
    public UserSubscription activateSubscription(Invoice paidInvoice) {
        // 1. Ki·ªÉm tra invoice
        SubscriptionPlan plan = paidInvoice.getPlanToActivate();
        if (plan == null) {
            log.info("Invoice #{} kh√¥ng ph·∫£i l√† invoice g√≥i c∆∞·ªõc, b·ªè qua.", paidInvoice.getInvoiceId());
            return null;
        }

        // 2. L·∫•y User
        User user = userRepository.findById(paidInvoice.getUserId())
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y User ID: " + paidInvoice.getUserId()));

        // 3. KI·ªÇM TRA G√ìI C∆Ø·ªöC HI·ªÜN T·∫†I
        Optional<UserSubscription> existingSubOpt = userSubscriptionRepository
                .findActiveSubscriptionForUser(
                        user.getUserId(),
                        UserSubscription.SubscriptionStatus.ACTIVE,
                        LocalDateTime.now()
                );

        if (existingSubOpt.isPresent()) {
            // --- LOGIC GIA H·∫†N (USER ƒê√É C√ì G√ìI ACTIVE) ---
            UserSubscription existingSub = existingSubOpt.get();
            log.info("User {} ƒë√£ c√≥ g√≥i ACTIVE. ƒêang ki·ªÉm tra gia h·∫°n...", user.getUserId());

            if (!existingSub.getPlan().getId().equals(plan.getId())) {
                log.warn("User {} ƒëang ACTIVE G√≥i {} nh∆∞ng l·∫°i thanh to√°n cho G√≥i {}. Ch·∫∑n k√≠ch ho·∫°t.",
                        user.getUserId(), existingSub.getPlan().getPlanName(), plan.getPlanName());
                throw new IllegalStateException("B·∫°n ƒë√£ c√≥ m·ªôt g√≥i c∆∞·ªõc ƒëang ho·∫°t ƒë·ªông (" + existingSub.getPlan().getPlanName() + "). " +
                        "Kh√¥ng th·ªÉ k√≠ch ho·∫°t G√≥i " + plan.getPlanName() + " c√πng l√∫c.");
            }

            LocalDateTime currentEndDate = existingSub.getEndDate();
            LocalDateTime newEndDate = currentEndDate.plusDays(plan.getDurationInDays());

            existingSub.setEndDate(newEndDate);
            existingSub.setUsedSwaps(0);
            existingSub.setStatus(UserSubscription.SubscriptionStatus.ACTIVE);

            UserSubscription savedSubscription = userSubscriptionRepository.save(existingSub);
            log.info("ƒê√£ GIA H·∫†N th√†nh c√¥ng G√≥i {} cho User {}. H·∫°n m·ªõi: {}",
                    plan.getPlanName(), user.getUserId(), newEndDate);
            return savedSubscription;

        } else {
            // --- LOGIC K√çCH HO·∫†T M·ªöI (USER CH∆ØA C√ì G√ìI) ---
            log.info("K√≠ch ho·∫°t G√≥i M·ªöI {} cho User {}", plan.getPlanName(), user.getUserId());

            LocalDateTime startTime = LocalDateTime.now();
            LocalDateTime endTime = startTime.plusDays(plan.getDurationInDays());

            UserSubscription newSubscription = UserSubscription.builder()
                    .user(user)
                    .plan(plan)
                    .startDate(startTime)
                    .endDate(endTime)
                    .status(UserSubscription.SubscriptionStatus.ACTIVE)
                    .autoRenew(true)
                    .usedSwaps(0)
                    .build();

            UserSubscription savedSubscription = userSubscriptionRepository.save(newSubscription);
            log.info("ƒê√£ k√≠ch ho·∫°t M·ªöI th√†nh c√¥ng G√≥i {} cho User {}",
                    plan.getPlanName(), user.getUserId());
            return savedSubscription;
        }
    }

    /**
     * T·∫°o m·ªôt Invoice PENDING ƒë·ªÉ GIA H·∫†N
     * (Gi·ªØ nguy√™n logic m·ªõi c·ªßa b·∫°n)
     */
    @Transactional
    public Invoice createRenewalInvoice(UserSubscription subscription) {

        SubscriptionPlan plan = subscription.getPlan();
        Double planPrice = systemPriceService.getPriceByType(plan.getPriceType());

        // Ki·ªÉm tra xem ƒë√£ c√≥ invoice PENDING n√†o ch∆∞a
        boolean hasPendingInvoice = invoiceRepository.existsByUserIdAndPlanToActivateAndInvoiceStatus(
                subscription.getUser().getUserId(),
                plan,
                Invoice.InvoiceStatus.PENDING
        );
        // (L∆∞u √Ω: B·∫°n c·∫ßn th√™m h√†m `existsByUserIdAndPlanToActivateAndInvoiceStatus` v√†o InvoiceRepository)

        if (hasPendingInvoice) {
            log.warn("User {} ƒë√£ c√≥ Invoice PENDING cho g√≥i {}, kh√¥ng t·∫°o th√™m.",
                    subscription.getUser().getUserId(), plan.getPlanName());
            return null;
        }

        // T·∫°o Invoice m·ªõi
        Invoice invoice = new Invoice();
        invoice.setUserId(subscription.getUser().getUserId());
        invoice.setCreatedDate(LocalDateTime.now());
        invoice.setInvoiceStatus(Invoice.InvoiceStatus.PENDING);
        invoice.setTotalAmount(planPrice);
        invoice.setPricePerSwap(planPrice);
        invoice.setNumberOfSwaps(1);
        invoice.setPlanToActivate(plan);

        Invoice savedInvoice = invoiceRepository.save(invoice);
        log.info("Scheduler ƒë√£ t·∫°o Invoice #{} GIA H·∫†N cho User {}",
                savedInvoice.getInvoiceId(), subscription.getUser().getUserId());
        return savedInvoice;
    }

    /**
     * T·∫Øt t·ª± ƒë·ªông gia h·∫°n (H·ªßy g√≥i c∆∞·ªõc)
     * (Gi·ªØ nguy√™n logic m·ªõi c·ªßa b·∫°n)
     */
    @Transactional
    public UserSubscription cancelSubscription(String userId) {
        UserSubscription activeSub = userSubscriptionRepository
                .findActiveSubscriptionForUser(
                        userId,
                        UserSubscription.SubscriptionStatus.ACTIVE,
                        LocalDateTime.now()
                ).orElseThrow(() ->
                        new EntityNotFoundException("B·∫°n kh√¥ng c√≥ g√≥i c∆∞·ªõc n√†o ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ h·ªßy.")
                );

        if (!activeSub.isAutoRenew()) {
            throw new IllegalStateException("G√≥i c∆∞·ªõc c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy (ƒë√£ t·∫Øt t·ª± ƒë·ªông gia h·∫°n) t·ª´ tr∆∞·ªõc.");
        }

        activeSub.setAutoRenew(false);
        UserSubscription savedSub = userSubscriptionRepository.save(activeSub);
        log.info("User {} ƒë√£ T·∫ÆT AUTO-RENEW cho G√≥i {}", userId, savedSub.getPlan().getPlanName());
        return savedSub;
    }


    /**
     * L·∫•y g√≥i c∆∞·ªõc ƒêANG HO·∫†T ƒê·ªòNG (ACTIVE) c·ªßa user.
     * (Gi·ªØ nguy√™n)
     */
    public Map<String, Object> getActiveSubscription(String userId) {
        UserSubscription activeSub = userSubscriptionRepository
                .findActiveSubscriptionForUser(
                        userId,
                        UserSubscription.SubscriptionStatus.ACTIVE,
                        LocalDateTime.now()
                ).orElse(null);

        if (activeSub == null) {
            return null;
        }
        return convertSubscriptionToMap(activeSub);
    }

    /**
     * L·∫•y T·∫§T C·∫¢ l·ªãch s·ª≠ g√≥i c∆∞·ªõc c·ªßa user.
     * (Gi·ªØ nguy√™n)
     */
    public List<Map<String, Object>> getSubscriptionHistory(String userId) {
        List<UserSubscription> allSubs = userSubscriptionRepository
                .findByUser_UserIdOrderByStartDateDesc(userId);

        return allSubs.stream()
                .map(this::convertSubscriptionToMap)
                .collect(Collectors.toList());
    }

    /**
     * ‚úÖ [S·ª¨A 3] H√†m helper, ƒë·ªïi Map.of() sang HashMap
     */
    private Map<String, Object> convertSubscriptionToMap(UserSubscription sub) {
        if (sub == null) {
            return null;
        }

        SubscriptionPlan plan = sub.getPlan();
        Double price = systemPriceService.getPriceByType(plan.getPriceType());

        Integer limit = plan.getSwapLimit();
        String limitStr = "Kh√¥ng gi·ªõi h·∫°n";
        if (limit != null && limit >= 0) {
            limitStr = String.valueOf(limit);
        }

        // D√πng HashMap ƒë·ªÉ tr√°nh NullPointerException
        Map<String, Object> map = new HashMap<>();
        map.put("userSubscriptionId", sub.getId());
        map.put("status", sub.getStatus().name());
        map.put("autoRenew", sub.isAutoRenew());
        map.put("startDate", sub.getStartDate());
        map.put("endDate", sub.getEndDate());
        map.put("usedSwaps", sub.getUsedSwaps());

        Map<String, Object> planMap = new HashMap<>();
        planMap.put("planId", plan.getId());
        planMap.put("planName", plan.getPlanName());
        planMap.put("description", plan.getDescription());
        planMap.put("durationInDays", plan.getDurationInDays());
        planMap.put("swapLimit", limitStr);
        planMap.put("price", price);

        map.put("plan", planMap);
        return map;
    }

    /**
     * L·∫•y t·∫•t c·∫£ c√°c g√≥i SubscriptionPlan c√≥ s·∫µn.
     * (Gi·ªØ nguy√™n, phi√™n b·∫£n n√†y ƒë√£ ƒë√∫ng)
     */
    public List<Map<String, Object>> getAllSubscriptionPlans() {

        List<SubscriptionPlan> allPlans = subscriptionPlanRepository.findAll();

        return allPlans.stream()
                .map(plan -> {
                    Double price = systemPriceService.getPriceByType(plan.getPriceType());

                    Integer limit = plan.getSwapLimit();
                    String limitStr = "Kh√¥ng gi·ªõi h·∫°n";
                    if (limit != null && limit >= 0) {
                        limitStr = String.valueOf(limit);
                    }

                    Map<String, Object> planMap = new HashMap<>();
                    planMap.put("planId", plan.getId());
                    planMap.put("planName", plan.getPlanName());
                    planMap.put("description", plan.getDescription());
                    planMap.put("price", price);
                    planMap.put("priceType", plan.getPriceType().name());
                    planMap.put("durationInDays", plan.getDurationInDays());
                    planMap.put("swapLimit", limitStr);
                    planMap.put("swapLimitInt", limit);

                    return planMap;
                })
                .collect(Collectors.toList());
    }


    /**
     * S·ª≠a l·∫°i h√†m n√†y ƒë·ªÉ g·ªçi 'bookingService.confirmPayment()'
     * thay v√¨ t·ª± √Ω 'setStatus'
     */
    @Transactional
    public UserSubscription useSwapForBooking(UseSwapRequest request) {
        log.info("User {} ƒëang s·ª≠ d·ª•ng G√≥i th√°ng ƒë·ªÉ thanh to√°n Invoice #{}", request.getUserId(), request.getInvoiceId());

        // 1. T√¨m H√≥a ƒë∆°n (Invoice)
        Invoice invoice = invoiceRepository.findById(request.getInvoiceId())
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y H√≥a ƒë∆°n: " + request.getInvoiceId()));

        // 2. T√¨m G√≥i c∆∞·ªõc (Subscription) ƒêANG HO·∫†T ƒê·ªòNG
        UserSubscription activeSub = userSubscriptionRepository
                .findActiveSubscriptionForUser(
                        request.getUserId(),
                        UserSubscription.SubscriptionStatus.ACTIVE,
                        LocalDateTime.now()
                )
                .orElseThrow(() -> new IllegalStateException("B·∫°n kh√¥ng c√≥ g√≥i c∆∞·ªõc n√†o ƒëang ho·∫°t ƒë·ªông."));

        // --- 3. KI·ªÇM TRA (VALIDATION) ---
        // (Gi·ªØ nguy√™n logic ki·ªÉm tra a, b, c)

        // a. Ki·ªÉm tra h√≥a ƒë∆°n c√≥ ph·∫£i 0 ƒê·ªíNG kh√¥ng
        // (Theo y√™u c·∫ßu: "amount/gi√° ti·ªÅn b·∫±ng 0")
        // if (invoice.getTotalAmount() > 0) {
        //     throw new IllegalStateException("H√≥a ƒë∆°n n√†y c√≥ gi√° tr·ªã. Vui l√≤ng thanh to√°n b·∫±ng VNPay.");
        // }

        // b. Ki·ªÉm tra h√≥a ƒë∆°n c√≥ ƒëang PENDING kh√¥ng
        if (invoice.getInvoiceStatus() != Invoice.InvoiceStatus.PENDING) {
            throw new IllegalStateException("H√≥a ƒë∆°n n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω (tr·∫°ng th√°i: " + invoice.getInvoiceStatus() + ").");
        }

        // c. Ki·ªÉm tra l∆∞·ª£t ƒë·ªïi pin (Swap Limit)
        int limit = activeSub.getPlan().getSwapLimit();
        int used = activeSub.getUsedSwaps();
        if (limit != -1 && used >= limit) {
            throw new IllegalStateException("B·∫°n ƒë√£ h·∫øt l∆∞·ª£t ƒë·ªïi pin c·ªßa g√≥i c∆∞·ªõc n√†y (" + used + "/" + limit + ").");
        }

        // --- 4. TH·ª∞C THI (EXECUTION) ---

        // a. Tr·ª´ 1 l∆∞·ª£t: TƒÉng 'usedSwaps' (Gi·ªØ nguy√™n)
        activeSub.setUsedSwaps(activeSub.getUsedSwaps() + 1);
        UserSubscription updatedSub = userSubscriptionRepository.save(activeSub);
        log.info("User {} ƒë√£ d√πng 1 l∆∞·ª£t. (C√≤n l·∫°i: {}/{}).", request.getUserId(), (activeSub.getUsedSwaps()), activeSub.getPlan().getSwapLimit());

        // b. Chuy·ªÉn Invoice sang PAID (Gi·ªØ nguy√™n)
        invoice.setInvoiceStatus(Invoice.InvoiceStatus.PAID);
        Invoice savedInvoice = invoiceRepository.save(invoice); // <-- L·∫•y H√≥a ƒë∆°n ƒë√£ l∆∞u
        log.info("Invoice #{} ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang PAID.", savedInvoice.getInvoiceId());

        // c. B·∫Øn (Publish) S·ª± ki·ªán
        log.info("Ph√°t s·ª± ki·ªán InvoicePaidEvent cho Invoice #{}", savedInvoice.getInvoiceId());
        eventPublisher.publishEvent(new InvoicePaidEvent(this, savedInvoice));
        // --- (H·∫øt code m·ªõi) ---

        return updatedSub; // Tr·∫£ v·ªÅ th√¥ng tin g√≥i c∆∞·ªõc ƒë√£ c·∫≠p nh·∫≠t
    }

}

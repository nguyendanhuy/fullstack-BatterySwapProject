package BatterySwapStation.service;

import BatterySwapStation.dto.BatteryRealtimeEvent;
import BatterySwapStation.dto.SwapListItemDTO;
import BatterySwapStation.dto.SwapRequest;
import BatterySwapStation.dto.SwapResponseDTO;
import BatterySwapStation.entity.*;
import BatterySwapStation.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

@Service
@RequiredArgsConstructor
public class SwapService {
    @Autowired
    private ApplicationContext context;
    private final SwapRepository swapRepository;
    private final BookingRepository bookingRepository;
    private final BatteryRepository batteryRepository;
    private final DockSlotRepository dockSlotRepository;
    private final StaffAssignRepository staffAssignRepository;
    private final SimpMessagingTemplate messagingTemplate;

    // ====================== CANCEL SWAP ======================
    @Transactional
    public Object cancelSwapByBooking(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y booking #" + bookingId));

        Swap swap = swapRepository.findTopByBooking_BookingIdOrderBySwapIdDesc(bookingId)
                .orElse(null);

        if (swap == null) {
            booking.setBookingStatus(Booking.BookingStatus.CANCELLED);
            booking.setCancellationReason("Staff h·ªßy booking (ch∆∞a ph√°t sinh swap).");
            bookingRepository.save(booking);
            return Map.of("bookingId", bookingId, "status", "CANCELLED",
                    "message", "ƒê√£ h·ªßy booking #" + bookingId + " do kh√°ch ƒëem sai lo·∫°i pin.");
        }

        String batteryOutId = swap.getBatteryOutId();
        String batteryInId = swap.getBatteryInId();
        if (batteryOutId == null || batteryInId == null) {
            booking.setBookingStatus(Booking.BookingStatus.CANCELLED);
            booking.setCancellationReason("Thi·∫øu th√¥ng tin pin.");
            swap.setStatus(Swap.SwapStatus.CANCELLED);
            bookingRepository.save(booking);
            swapRepository.save(swap);
            return Map.of("bookingId", bookingId, "status", "CANCELLED",
                    "message", "H·ªßy booking #" + bookingId + " do thi·∫øu th√¥ng tin pin.");
        }

        Battery batteryOut = batteryRepository.findById(batteryOutId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pinOut: " + batteryOutId));
        Battery batteryIn = batteryRepository.findById(batteryInId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pinIn: " + batteryInId));

        Integer stationId = booking.getStation().getStationId();

        // 1Ô∏è‚É£ PinOut: tr·∫£ l·∫°i dock tr·ªëng
        if (batteryOut.getDockSlot() != null) {
            DockSlot old = batteryOut.getDockSlot();
            old.setBattery(null);
            old.setSlotStatus(DockSlot.SlotStatus.EMPTY);
            dockSlotRepository.save(old);
            batteryOut.setDockSlot(null);
        }

        DockSlot slotForOut = dockSlotRepository
                .findFirstByDock_Station_StationIdAndBatteryIsNullAndIsActiveTrue(stationId)
                .orElseThrow(() -> new IllegalStateException("Kh√¥ng c√≤n slot tr·ªëng ƒë·ªÉ tr·∫£ pinOut."));

        slotForOut.setBattery(batteryOut);
        slotForOut.setSlotStatus(DockSlot.SlotStatus.OCCUPIED);
        batteryOut.setBatteryStatus(Battery.BatteryStatus.AVAILABLE);
        batteryOut.setStationId(stationId);
        batteryOut.setDockSlot(slotForOut);

        // 2Ô∏è‚É£ PinIn: gi·ªØ l·∫°i ƒë·ªÉ s·∫°c
        DockSlot slotForIn = dockSlotRepository
                .findFirstByDock_Station_StationIdAndBatteryIsNullAndIsActiveTrue(stationId)
                .orElseThrow(() -> new IllegalStateException("Kh√¥ng c√≤n slot tr·ªëng ƒë·ªÉ nh·∫≠n pin kh√°ch tr·∫£."));

        if (slotForIn.getDockSlotId().equals(slotForOut.getDockSlotId())) {
            slotForIn = dockSlotRepository
                    .findFirstByDock_Station_StationIdAndBatteryIsNullAndIsActiveTrue(stationId)
                    .orElseThrow(() -> new IllegalStateException("Kh√¥ng c√≤n slot kh√°c ƒë·ªÉ nh·∫≠n pin kh√°ch tr·∫£."));
        }

        slotForIn.setBattery(batteryIn);
        slotForIn.setSlotStatus(DockSlot.SlotStatus.OCCUPIED);
        batteryIn.setBatteryStatus(Battery.BatteryStatus.WAITING_CHARGE);
        batteryIn.setStationId(stationId);
        batteryIn.setDockSlot(slotForIn);

        dockSlotRepository.saveAll(List.of(slotForOut, slotForIn));
        batteryRepository.saveAll(List.of(batteryOut, batteryIn));

        booking.setBookingStatus(Booking.BookingStatus.CANCELLED);
        booking.setCancellationReason("H·ªßy swap th√†nh c√¥ng.");
        swap.setStatus(Swap.SwapStatus.CANCELLED);
        swap.setDescription("H·ªßy swap: pinOut tr·∫£ l·∫°i tr·∫°m (AVAILABLE), pinIn ƒëang s·∫°c (CHARGING).");

        bookingRepository.save(booking);
        swapRepository.save(swap);

        return Map.of(
                "bookingId", bookingId,
                "status", "CANCELLED",
                "message", "H·ªßy Swap th√†nh c√¥ng."
        );
    }

    // ====================== COMMIT SWAP ======================
    @Transactional
    public Object commitSwap(SwapRequest request) {
        Booking booking = bookingRepository.findById(request.getBookingId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y booking ID: " + request.getBookingId()));

        if (booking.getBookingStatus() == Booking.BookingStatus.COMPLETED)
            throw new IllegalStateException("Booking ƒë√£ ho√†n th√†nh, kh√¥ng th·ªÉ swap l·∫°i.");

        List<String> batteryInIds = request.getBatteryInIds();
        if (batteryInIds == null || batteryInIds.isEmpty())
            throw new IllegalArgumentException("Thi·∫øu th√¥ng tin pin kh√°ch ƒë∆∞a.");

        Integer requiredCount = (booking.getBatteryCount() != null && booking.getBatteryCount() > 0)
                ? booking.getBatteryCount() : 1;

        if (batteryInIds.size() != requiredCount)
            throw new IllegalArgumentException("S·ªë l∆∞·ª£ng pin nh·∫≠p kh√¥ng kh·ªõp v·ªõi booking y√™u c·∫ßu (" + requiredCount + ").");

        // Ki·ªÉm tra model t·ª´ng pinIn
        for (String batteryInId : batteryInIds) {
            Battery battery = batteryRepository.findById(batteryInId)
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pin #" + batteryInId));

            if (battery.getBatteryType() == null)
                throw new IllegalStateException("Pin " + batteryInId + " ch∆∞a x√°c ƒë·ªãnh lo·∫°i model.");

            if (!battery.getBatteryType().name().equalsIgnoreCase(booking.getBatteryType()))
                throw new IllegalStateException("Pin " + batteryInId + " kh√°c model (" +
                        battery.getBatteryType().name() + " ‚â† " + booking.getBatteryType() + ").");
        }

        long availableCount = dockSlotRepository
                .countByDock_Station_StationIdAndBattery_BatteryStatus(
                        booking.getStation().getStationId(), Battery.BatteryStatus.AVAILABLE);
        if (availableCount < requiredCount)
            throw new IllegalStateException("Kh√¥ng ƒë·ªß pin ƒë·∫ßy kh·∫£ d·ª•ng ƒë·ªÉ swap.");

        String currentStaffUserId = resolveStaffUserId(request);
        boolean staffInStation = staffAssignRepository.existsByStationIdAndUser_UserId(
                booking.getStation().getStationId(), currentStaffUserId);
        if (!staffInStation)
            throw new IllegalStateException("Nh√¢n vi√™n kh√¥ng thu·ªôc tr·∫°m n√†y, kh√¥ng th·ªÉ th·ª±c hi·ªán swap.");

        Set<String> usedDockSlots = new HashSet<>();
        List<SwapResponseDTO> results = new ArrayList<>();

        for (String batteryInId : batteryInIds) {
            SwapService self = context.getBean(SwapService.class);
            SwapResponseDTO res = self.handleSingleSwap(booking, batteryInId, currentStaffUserId, usedDockSlots);
            usedDockSlots.add(res.getDockOutSlot());
            results.add(res);
        }

        booking.setBookingStatus(Booking.BookingStatus.COMPLETED);
        booking.setCompletedTime(LocalDate.now());
        bookingRepository.save(booking);

        return results.size() == 1 ? results.get(0) : results;
    }

    // ====================== HANDLE SINGLE SWAP ======================
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    protected SwapResponseDTO handleSingleSwap(Booking booking, String batteryInId, String staffUserId, Set<String> usedDockSlots) {
        Integer stationId = booking.getStation().getStationId();
        Battery batteryIn = batteryRepository.findById(batteryInId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pin kh√°ch ƒë∆∞a: " + batteryInId));

        if (!batteryIn.isActive())
            throw new IllegalStateException("Pin " + batteryInId + " b·ªã v√¥ hi·ªáu h√≥a.");
        if (batteryIn.getBatteryStatus() == Battery.BatteryStatus.MAINTENANCE)
            throw new IllegalStateException("Pin " + batteryInId + " ƒëang b·∫£o tr√¨.");

        // üîπ T√¨m pinOut ph√π h·ª£p
        List<DockSlot> availableSlots = dockSlotRepository
                .findAllByDock_Station_StationIdAndBattery_BatteryTypeAndBattery_BatteryStatusAndSlotStatusOrderByDock_DockNameAscSlotNumberAsc(
                        stationId,
                        batteryIn.getBatteryType(),
                        Battery.BatteryStatus.AVAILABLE,
                        DockSlot.SlotStatus.OCCUPIED
                );

        availableSlots.removeIf(slot ->
                slot.getBattery() == null ||
                        slot.getBattery().getBatteryId().equals(batteryInId) ||
                        usedDockSlots.contains(slot.getDock().getDockName() + slot.getSlotNumber())
        );

        DockSlot dockOutSlot = availableSlots.stream()
                .findFirst()
                .orElseThrow(() -> new IllegalStateException("Kh√¥ng c√≤n slot kh·∫£ d·ª•ng kh√°c cho swap."));

        Battery batteryOut = dockOutSlot.getBattery();
        String dockCode = dockOutSlot.getDock().getDockName() + dockOutSlot.getSlotNumber();

        // 1Ô∏è‚É£ Nh·∫£ pinOut
        batteryOut.setBatteryStatus(Battery.BatteryStatus.IN_USE);
        batteryOut.setStationId(null);
        batteryOut.setDockSlot(null);
        dockOutSlot.setBattery(null);
        dockOutSlot.setSlotStatus(DockSlot.SlotStatus.EMPTY);

        batteryRepository.save(batteryOut);
        dockSlotRepository.save(dockOutSlot);
        batteryRepository.flush();
        dockSlotRepository.flush();

        // üîî G·ª≠i realtime: pinOut b·ªã l·∫•y ra
        sendRealtimeUpdate(dockOutSlot, "REMOVED");

        // 2Ô∏è‚É£ G·∫Øn pinIn v√†o slot (CHARGING)
        batteryIn.setBatteryStatus(Battery.BatteryStatus.CHARGING);
        batteryIn.setStationId(stationId);
        batteryIn.setDockSlot(dockOutSlot);
        if (batteryIn.getCurrentCapacity() == null || batteryIn.getCurrentCapacity() <= 0.0)
            batteryIn.setCurrentCapacity(10.0);

        dockOutSlot.setBattery(batteryIn);
        dockOutSlot.setSlotStatus(DockSlot.SlotStatus.OCCUPIED);

        batteryRepository.save(batteryIn);
        dockSlotRepository.save(dockOutSlot);

        // üîî G·ª≠i realtime: pinIn m·ªõi ƒë∆∞·ª£c ƒë∆∞a v√†o tr·∫°m
        sendRealtimeUpdate(dockOutSlot, "INSERTED");

        // 3Ô∏è‚É£ Ghi swap record
        Swap swap = Swap.builder()
                .booking(booking)
                .dockId(dockOutSlot.getDock().getDockId())
                .userId(booking.getUser().getUserId())
                .batteryOutId(batteryOut.getBatteryId())
                .batteryInId(batteryIn.getBatteryId())
                .staffUserId(staffUserId)
                .status(Swap.SwapStatus.SUCCESS)
                .dockOutSlot(dockCode)
                .dockInSlot(dockCode)
                .completedTime(LocalDateTime.now())
                .description("Swap ho√†n t·∫•t: Tr·∫°m giao " + batteryOut.getBatteryId() +
                        ", nh·∫≠n l·∫°i " + batteryIn.getBatteryId() + " t·ª´ kh√°ch ƒë·ªÉ s·∫°c.")
                .build();
        swapRepository.save(swap);

        // G·ª≠i realtime t·ªïng th·ªÉ: tr·∫°ng th√°i slot ƒë√£ thay ƒë·ªïi
        sendRealtimeUpdate(dockOutSlot, "STATUS_CHANGED");

        return SwapResponseDTO.builder()
                .swapId(swap.getSwapId())
                .status("SUCCESS")
                .message("Swap th√†nh c√¥ng: " + batteryOut.getBatteryId() + " ƒë√£ giao, " +
                        batteryIn.getBatteryId() + " ƒëang s·∫°c t·∫°i tr·∫°m.")
                .bookingId(booking.getBookingId())
                .batteryOutId(batteryOut.getBatteryId())
                .batteryInId(batteryIn.getBatteryId())
                .dockOutSlot(dockCode)
                .dockInSlot(dockCode)
                .build();
    }
    // ====================== RESOLVE STAFF ID ======================
    private String resolveStaffUserId(SwapRequest request) {
        Authentication auth = SecurityContextHolder.getContext() != null
                ? SecurityContextHolder.getContext().getAuthentication()
                : null;
        if (auth != null && auth.isAuthenticated()) {
            String name = auth.getName();
            if (name != null && !"anonymousUser".equalsIgnoreCase(name)) return name;
        }
        if (request.getStaffUserId() != null && !request.getStaffUserId().isBlank())
            return request.getStaffUserId();
        throw new IllegalStateException("Thi·∫øu staffUserId (ch∆∞a ƒëƒÉng nh·∫≠p staff ho·∫∑c kh√¥ng truy·ªÅn staffUserId).");
    }

    @Transactional(readOnly = true)
    public List<SwapListItemDTO> getSwapsByStation(Integer stationId) {
        List<Swap> swaps = swapRepository.findAllByStationId(stationId);
        return swaps.stream().map(this::toListItemDTO).toList();
    }

    private SwapListItemDTO toListItemDTO(Swap s) {
        return SwapListItemDTO.builder()
                .swapId(s.getSwapId())
                .bookingId(s.getBooking().getBookingId())
                .stationId(s.getBooking().getStation().getStationId())
                .userId(s.getUserId())
                .staffUserId(s.getStaffUserId())
                .batteryOutId(s.getBatteryOutId())
                .batteryInId(s.getBatteryInId())
                .dockOutSlot(s.getDockOutSlot())
                .dockInSlot(s.getDockInSlot())
                .status(s.getStatus() != null ? s.getStatus().name() : null)
                .completedTime(s.getCompletedTime())
                .description(s.getDescription())
                .build();
    }

    private void sendRealtimeUpdate(DockSlot slot, String action) {
        var battery = slot.getBattery();
        var dock = slot.getDock();
        var station = dock.getStation();

        BatteryRealtimeEvent event = BatteryRealtimeEvent.builder()
                .stationId(station.getStationId())
                .dockName(dock.getDockName())
                .slotNumber(slot.getSlotNumber())
                .batteryId(battery != null ? battery.getBatteryId() : null)
                .batteryStatus(battery != null ? battery.getBatteryStatus().name() : "EMPTY")
                .stateOfHealth(battery != null ? battery.getStateOfHealth() : null)
                .currentCapacity(battery != null ? battery.getCurrentCapacity() : null)
                .action(action)
                .timestamp(LocalDateTime.now().toString())
                .build();

        messagingTemplate.convertAndSend("/topic/station-" + station.getStationId(), event);
    }
}

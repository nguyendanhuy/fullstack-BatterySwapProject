package BatterySwapStation.service;

import BatterySwapStation.dto.SwapRequest;
import BatterySwapStation.dto.SwapResponseDTO;
import BatterySwapStation.entity.*;
import BatterySwapStation.repository.*;
<<<<<<< Updated upstream
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.context.ApplicationContext;
=======
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
>>>>>>> Stashed changes

import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
<<<<<<< Updated upstream
import java.util.*;
=======
import java.util.Optional;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
>>>>>>> Stashed changes

@Service
@RequiredArgsConstructor
public class SwapService {
    @Autowired
    private ApplicationContext context;
    private final SwapRepository swapRepository;
    private final BookingRepository bookingRepository;
    private final BatteryRepository batteryRepository;
    private final DockSlotRepository dockSlotRepository;
    private final StaffAssignRepository staffAssignRepository;

<<<<<<< Updated upstream
    // ====================== CANCEL SWAP ======================
    @Transactional
    public Object cancelSwap(Long swapId, String cancelType) {
        Swap swap = swapRepository.findById(swapId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y swap #" + swapId));

        Booking booking = swap.getBooking();
        if (booking == null) {
            throw new IllegalStateException("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c booking c·ªßa swap n√†y.");
        }

        // üîπ TEMP = h·ªßy t·∫°m th·ªùi (user c√≥ th·ªÉ quay l·∫°i retry)
        if ("TEMP".equalsIgnoreCase(cancelType)) {
            swap.setStatus(Swap.SwapStatus.CANCELLED_TEMP);
            swap.setDescription("Swap b·ªã h·ªßy t·∫°m th·ªùi. Ch·ªù ng∆∞·ªùi d√πng quay l·∫°i x√°c nh·∫≠n.");
            swapRepository.save(swap);
            return Map.of(
                    "swapId", swapId,
                    "status", "CANCELLED_TEMP",
                    "message", "ƒê√£ h·ªßy t·∫°m th·ªùi swap #" + swapId
            );
        }

        // üîπ PERMANENT = h·ªßy ho√†n to√†n, rollback d·ªØ li·ªáu
        if ("PERMANENT".equalsIgnoreCase(cancelType)) {
            String batteryOutId = swap.getBatteryOutId();
            String batteryInId = swap.getBatteryInId();

            Battery batteryOut = batteryRepository.findById(batteryOutId)
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pinOut: " + batteryOutId));
            Battery batteryIn = batteryRepository.findById(batteryInId)
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pinIn: " + batteryInId));

            DockSlot emptySlot = dockSlotRepository
                    .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(
                            booking.getStation().getStationId())
                    .orElseThrow(() -> new IllegalStateException("Kh√¥ng c√≤n slot tr·ªëng ƒë·ªÉ tr·∫£ pinOut."));
            emptySlot.setBattery(batteryOut);
            emptySlot.setSlotStatus(DockSlot.SlotStatus.OCCUPIED);

            batteryOut.setBatteryStatus(Battery.BatteryStatus.AVAILABLE);
            batteryOut.setStationId(booking.getStation().getStationId());
            batteryOut.setDockSlot(emptySlot);

            batteryIn.setDockSlot(null);
            batteryIn.setStationId(null);
            batteryIn.setBatteryStatus(Battery.BatteryStatus.IN_USE);

            batteryRepository.save(batteryOut);
            batteryRepository.save(batteryIn);
            dockSlotRepository.save(emptySlot);

            booking.setBookingStatus(Booking.BookingStatus.CANCELLED);
            booking.setCancellationReason("Staff h·ªßy swap kh√°c model (permanent cancel).");

            swap.setStatus(Swap.SwapStatus.CANCELLED);
            swap.setDescription("Staff ƒë√£ h·ªßy ho√†n to√†n swap kh√°c model. ƒê√£ rollback pin.");

            bookingRepository.save(booking);
            swapRepository.save(swap);

            return Map.of(
                    "swapId", swapId,
                    "status", "CANCELLED",
                    "message", "ƒê√£ h·ªßy ho√†n to√†n swap #" + swapId + " v√† rollback pin th√†nh c√¥ng."
            );
        }

        throw new IllegalArgumentException("Lo·∫°i h·ªßy kh√¥ng h·ª£p l·ªá: " + cancelType);
    }


    // ====================== COMMIT SWAP ======================
    @Transactional
    public Object commitSwap(SwapRequest request) {
        Booking booking = bookingRepository.findById(request.getBookingId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y booking ID: " + request.getBookingId()));

        if (booking.getBookingStatus() == Booking.BookingStatus.COMPLETED) {
            throw new IllegalStateException("Booking ƒë√£ ho√†n th√†nh, kh√¥ng th·ªÉ swap l·∫°i.");
        }

        List<String> batteryInIds = request.getBatteryInIds();
        if (batteryInIds == null || batteryInIds.isEmpty()) {
            throw new IllegalArgumentException("Thi·∫øu th√¥ng tin pin kh√°ch ƒë∆∞a.");
        }

        Integer requiredCount = (booking.getBatteryCount() != null && booking.getBatteryCount() > 0)
                ? booking.getBatteryCount() : 1;

        if (batteryInIds.size() < requiredCount) {
            throw new IllegalArgumentException("Booking #" + booking.getBookingId() + " y√™u c·∫ßu ƒë·ªïi " + requiredCount + " pin, nh∆∞ng ch·ªâ nh·∫≠n ƒë∆∞·ª£c " + batteryInIds.size() + ".");
        }
        if (batteryInIds.size() > requiredCount) {
            throw new IllegalArgumentException("Booking #" + booking.getBookingId() + " ch·ªâ cho ph√©p ƒë·ªïi " + requiredCount + " pin, nh∆∞ng ƒë√£ nh·∫≠p " + batteryInIds.size() + ".");
        }

        long availableCount = dockSlotRepository.countByDock_Station_StationIdAndBattery_BatteryStatus(
                booking.getStation().getStationId(), Battery.BatteryStatus.AVAILABLE);

        if (availableCount == 0) {
            throw new IllegalStateException("Tr·∫°m hi·ªán kh√¥ng c√≤n pin ƒë·∫ßy kh·∫£ d·ª•ng ƒë·ªÉ th·ª±c hi·ªán swap.");
        } else if (availableCount < requiredCount) {
            System.out.println("‚ö†Ô∏è C·∫£nh b√°o: Tr·∫°m ch·ªâ c√≥ " + availableCount + "/" + requiredCount + " pin ƒë·∫ßy.");
        }

        // ‚úÖ L·∫•y staffUserId chu·∫©n
        String currentStaffUserId = resolveStaffUserId(request);
        if (currentStaffUserId == null || currentStaffUserId.isBlank()) {
            throw new IllegalArgumentException("Thi·∫øu m√£ nh√¢n vi√™n (staffUserId) trong request.");
        }

        boolean staffInStation = staffAssignRepository.existsByStationIdAndUser_UserId(
                booking.getStation().getStationId(), currentStaffUserId);
        if (!staffInStation) {
            throw new IllegalStateException("Nh√¢n vi√™n kh√¥ng thu·ªôc tr·∫°m n√†y, kh√¥ng th·ªÉ th·ª±c hi·ªán swap.");
        }

        List<SwapResponseDTO> results = new ArrayList<>();
        for (String batteryInId : batteryInIds) {
            try {
                SwapService self = context.getBean(SwapService.class);
                SwapResponseDTO response = self.handleSingleSwap(booking, batteryInId, currentStaffUserId);
                results.add(response);
            } catch (Exception e) {
                results.add(SwapResponseDTO.builder()
                        .bookingId(booking.getBookingId())
                        .batteryInId(batteryInId)
                        .status("FAILED")
                        .message(e.getMessage())
                        .build());
            }
        }

        long successSwaps = swapRepository.countByBooking_BookingIdAndStatus(
                booking.getBookingId(), Swap.SwapStatus.SUCCESS);

        if (successSwaps >= requiredCount) {
            booking.setBookingStatus(Booking.BookingStatus.COMPLETED);
            booking.setCompletedTime(LocalDate.now());
        } else {
            booking.setBookingStatus(Booking.BookingStatus.PENDINGSWAPPING);
        }

        bookingRepository.save(booking);
        return results.size() == 1 ? results.get(0) : results;
    }


    // ====================== AUTO CANCEL ======================
    @Scheduled(fixedRate = 600000)
    @Transactional
    public void autoCancelUnconfirmedSwaps() {
        List<Swap> waitingSwaps = swapRepository.findByStatus(Swap.SwapStatus.WAITING_USER_RETRY);
        LocalDateTime now = LocalDateTime.now();

        for (Swap swap : waitingSwaps) {
            if (swap.getCompletedTime() != null && Duration.between(swap.getCompletedTime(), now).toHours() >= 1) {
                Booking booking = swap.getBooking();
                if (booking != null && booking.getBookingStatus() == Booking.BookingStatus.COMPLETED) {
                    booking.setBookingStatus(Booking.BookingStatus.CANCELLED);
                    booking.setCancellationReason("T·ª± ƒë·ªông h·ªßy swap kh√°c model sau 1 ti·∫øng kh√¥ng x√°c nh·∫≠n.");
                    bookingRepository.save(booking);
                }
                swap.setStatus(Swap.SwapStatus.CANCELLED);
                swap.setDescription("T·ª± ƒë·ªông h·ªßy swap kh√°c model sau 1 ti·∫øng kh√¥ng x√°c nh·∫≠n.");
                swapRepository.save(swap);
            }
        }
    }

    // ====================== HANDLE SINGLE SWAP ======================
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    protected SwapResponseDTO handleSingleSwap(Booking booking, String batteryInId, String staffUserId) {
        Integer stationId = booking.getStation().getStationId();

        Battery batteryIn = batteryRepository.findById(batteryInId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pin kh√°ch ƒë∆∞a: " + batteryInId));
        if (!batteryIn.isActive()) throw new IllegalStateException("Pin " + batteryInId + " b·ªã v√¥ hi·ªáu h√≥a.");
        if (batteryIn.getBatteryStatus() == Battery.BatteryStatus.MAINTENANCE)
            throw new IllegalStateException("Pin " + batteryInId + " ƒëang b·∫£o tr√¨.");
        if (batteryIn.getBatteryType() == null)
            throw new IllegalStateException("Pin " + batteryInId + " ch∆∞a x√°c ƒë·ªãnh lo·∫°i.");

        String bookedType = booking.getBatteryType();
        if (bookedType != null && !batteryIn.getBatteryType().name().equalsIgnoreCase(bookedType))
            throw new IllegalStateException("Pin " + batteryInId + " kh√¥ng c√πng lo·∫°i v·ªõi pin ƒë√£ booking.");

        // ‚úÖ Ch·ªçn pinOut c√πng model v·ªõi booking ho·∫∑c pinIn
        DockSlot dockOutSlot = dockSlotRepository
                .findFirstByDock_Station_StationIdAndBattery_BatteryTypeAndBattery_BatteryStatusAndSlotStatusOrderByDock_DockNameAscSlotNumberAsc(
                        stationId,
                        batteryIn.getBatteryType(),
                        Battery.BatteryStatus.AVAILABLE,
                        DockSlot.SlotStatus.OCCUPIED
                )
                .orElseThrow(() -> new IllegalStateException("Kh√¥ng c√≤n pin ƒë·∫ßy ƒë√∫ng model trong tr·∫°m."));

        Battery batteryOut = dockOutSlot.getBattery();
        if (batteryOut == null)
            throw new IllegalStateException("Slot ch·ª©a pinOut kh√¥ng h·ª£p l·ªá (kh√¥ng c√≥ pin).");

        DockSlot dockInSlot = dockSlotRepository.findByBattery_BatteryId(batteryInId).orElse(null);
        if (dockInSlot == null) {
            dockInSlot = dockSlotRepository
                    .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(stationId)
                    .orElseThrow(() -> new IllegalStateException("Kh√¥ng c√≤n slot tr·ªëng trong tr·∫°m ƒë·ªÉ nh·∫≠n pinIn."));
        }

        String dockOutCode = (dockOutSlot.getDock() != null)
                ? dockOutSlot.getDock().getDockName() + dockOutSlot.getSlotNumber()
                : "UNKNOWN" + dockOutSlot.getSlotNumber();
        String dockInCode = dockInSlot.getDock().getDockName() + dockInSlot.getSlotNumber();

        Swap.SwapStatus swapStatus = Swap.SwapStatus.SUCCESS;
        String description = "Swap ho√†n t·∫•t.";

        // ‚ö†Ô∏è N·∫øu tr·∫°m v·∫´n l·ª° ch·ªçn nh·∫ßm model, fallback c·∫£nh b√°o
        if (!batteryIn.getBatteryType().equals(batteryOut.getBatteryType())) {
            swapStatus = Swap.SwapStatus.WAITING_USER_RETRY;
            description = "Pin kh√°c model - ch·ªù ng∆∞·ªùi d√πng x√°c nh·∫≠n.";
        }

        dockInSlot.setBattery(batteryIn);
        batteryIn.setStationId(dockInSlot.getDock().getStation().getStationId());
        batteryIn.setDockSlot(dockInSlot);

        if (batteryIn.getStateOfHealth() != null && batteryIn.getStateOfHealth() < 70.0) {
            batteryIn.setBatteryStatus(Battery.BatteryStatus.MAINTENANCE);
            dockInSlot.setSlotStatus(DockSlot.SlotStatus.RESERVED);
            description += " Pin SoH th·∫•p, chuy·ªÉn MAINTENANCE.";
        } else {
            batteryIn.setBatteryStatus(Battery.BatteryStatus.AVAILABLE);
            dockInSlot.setSlotStatus(DockSlot.SlotStatus.OCCUPIED);
        }

        batteryOut.setBatteryStatus(Battery.BatteryStatus.IN_USE);
        dockOutSlot.setBattery(null);
        dockOutSlot.setSlotStatus(DockSlot.SlotStatus.EMPTY);
        batteryOut.setStationId(null);
        batteryOut.setDockSlot(null);

        batteryRepository.save(batteryIn);
        batteryRepository.save(batteryOut);
        dockSlotRepository.save(dockInSlot);
        dockSlotRepository.save(dockOutSlot);

        Integer dockIdForRecord = dockOutSlot.getDock() != null ? dockOutSlot.getDock().getDockId() : stationId;
=======
    private final SwapRepository swapRepository;
    private final BookingRepository bookingRepository;
    private final BatteryRepository batteryRepository;
    private final DockSlotRepository dockSlotRepository;

    @Transactional
    public SwapResponseDTO commitSwap(SwapRequest request) {
        // Booking t·ª´ QR
        Booking booking = bookingRepository.findById(request.getBookingId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y booking ID: " + request.getBookingId()));

        if (booking.getBookingStatus() == Booking.BookingStatus.COMPLETED) {
            throw new IllegalStateException("Booking ƒë√£ ho√†n th√†nh, kh√¥ng th·ªÉ swap l·∫°i.");
        }
        Integer stationId = booking.getStation().getStationId();

        //  Pin KH ƒë∆∞a (batteryIn)
        Battery batteryIn = batteryRepository.findById(request.getBatteryInId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y pin kh√°ch ƒë∆∞a: " + request.getBatteryInId()));

        //  validate battery
        if (!batteryIn.isActive()) {
            throw new IllegalStateException("Pin n√†y ƒëang b·ªã v√¥ hi·ªáu h√≥a ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông.");
        }

        if (batteryIn.getBatteryStatus() == Battery.BatteryStatus.MAINTENANCE) {
            throw new IllegalStateException("Pin n√†y ƒëang trong b·∫£o tr√¨, kh√¥ng th·ªÉ swap.");
        }

        if (batteryIn.getBatteryType() == null) {
            throw new IllegalStateException("Pin ch∆∞a x√°c ƒë·ªãnh lo·∫°i, vui l√≤ng ki·ªÉm tra l·∫°i.");
        }


        String bookedBatteryType = booking.getBatteryType();
        if (bookedBatteryType != null && !batteryIn.getBatteryType().name().equalsIgnoreCase(bookedBatteryType)) {
            throw new IllegalStateException("Pin kh√¥ng c√πng lo·∫°i v·ªõi lo·∫°i pin ƒë√£ booking, vui l√≤ng mang ƒë√∫ng lo·∫°i pin.");
        }


        //  T·ª± ch·ªçn pin ƒë·∫ßy kh·∫£ d·ª•ng (batteryOut)
        DockSlot dockOutSlot = dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        stationId,
                        DockSlot.SlotStatus.OCCUPIED,
                        Battery.BatteryStatus.AVAILABLE
                )
                .orElseThrow(() -> new IllegalStateException("Kh√¥ng c√≤n pin ƒë·∫ßy kh·∫£ d·ª•ng trong tr·∫°m."));

        Battery batteryOut = dockOutSlot.getBattery();
        if (batteryOut == null) {
            throw new IllegalStateException("Slot ch·ª©a pinOut kh√¥ng h·ª£p l·ªá (kh√¥ng c√≥ pin).");
        }

        // 4Ô∏è‚É£ Slot ch·ª©a batteryIn (n·∫øu pin ƒëang n·∫±m slot n√†o ƒë√≥)
        Optional<DockSlot> inSlotOpt = dockSlotRepository.findByBattery_BatteryId(batteryIn.getBatteryId());
        DockSlot dockInSlot = inSlotOpt.orElse(null);

        // N·∫øu pinIn ch∆∞a n·∫±m slot n√†o => t√¨m slot tr·ªëng ƒë·ªÉ nh·∫≠n
        if (dockInSlot == null) {
            dockInSlot = dockSlotRepository
                    .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(stationId)
                    .orElse(null);
        }
        if (dockInSlot == null) {
            throw new IllegalStateException("Kh√¥ng c√≤n slot tr·ªëng trong tr·∫°m ƒë·ªÉ nh·∫≠n pinIn.");
        }

        // 5Ô∏è‚É£ M√£ hi·ªÉn th·ªã slot: "A2", "B5"
        String dockOutCode;
        if (dockOutSlot.getDock() != null) {
            dockOutCode = dockOutSlot.getDock().getDockName() + dockOutSlot.getSlotNumber();
        } else {
            dockOutCode = "UNKNOWN" + dockOutSlot.getSlotNumber(); // fallback n·∫øu dockOutSlot.getDock() == null
        }

        String dockInCode = dockInSlot.getDock().getDockName() + dockInSlot.getSlotNumber();

        // 6Ô∏è‚É£ Ki·ªÉm tra kh√°c model => ch·ªù user retry
        Swap.SwapStatus swapStatus = Swap.SwapStatus.SUCCESS;
        String description = "Swap ho√†n t·∫•t.";

        if (!batteryIn.getBatteryType().equals(batteryOut.getBatteryType())) {
            swapStatus = Swap.SwapStatus.WAITING_USER_RETRY;
            description = "Pin kh√°c model - ch·ªù ng∆∞·ªùi d√πng quay l·∫°i x√°c nh·∫≠n trong 1 gi·ªù.";
        }

        // G·∫Øn pinIn v√†o slot nh·∫≠n v√† x·ª≠ l√Ω SoH
        dockInSlot.setBattery(batteryIn);

        // G√°n stationId cho pin d·ª±a v√†o slot
        batteryIn.setStationId(dockInSlot.getDock().getStation().getStationId());
        batteryIn.setDockSlot(dockInSlot);

        if (batteryIn.getStateOfHealth() != null && batteryIn.getStateOfHealth() < 70.0) {
            batteryIn.setBatteryStatus(Battery.BatteryStatus.MAINTENANCE);
            dockInSlot.setSlotStatus(DockSlot.SlotStatus.RESERVED); // Kh√≥a slot
            description += " Pin tr·∫£ SoH th·∫•p, ƒë√£ ƒë·∫∑t v√†o slot v√† kh√≥a (RESERVED), pin chuy·ªÉn MAINTENANCE.";
        } else {
            batteryIn.setBatteryStatus(Battery.BatteryStatus.AVAILABLE);
            dockInSlot.setSlotStatus(DockSlot.SlotStatus.OCCUPIED);
        }

        //  Nh·∫£ pinOut cho user
        batteryOut.setBatteryStatus(Battery.BatteryStatus.IN_USE);
        dockOutSlot.setBattery(null);
        dockOutSlot.setSlotStatus(DockSlot.SlotStatus.EMPTY);

        // Reset v·ªã tr√≠ pinOut v√¨ n√≥ ƒë√£ r·ªùi tr·∫°m
        batteryOut.setStationId(null);
        batteryOut.setDockSlot(null);

        //  L∆∞u DB
        batteryRepository.save(batteryIn);
        batteryRepository.save(batteryOut);
        dockSlotRepository.save(dockInSlot);
        dockSlotRepository.save(dockOutSlot);

        //Booking status
        if (swapStatus == Swap.SwapStatus.WAITING_USER_RETRY) {
            booking.setBookingStatus(Booking.BookingStatus.PENDINGSWAPPING);
        } else {
            booking.setBookingStatus(Booking.BookingStatus.COMPLETED);
            booking.setCompletedTime(LocalDate.now());
        }
        bookingRepository.save(booking);

        // L·∫•y Staff userId t·ª´ SecurityContext ho·∫∑c request
        String currentStaffUserId = null;
        Authentication auth = SecurityContextHolder.getContext() != null
                ? SecurityContextHolder.getContext().getAuthentication()
                : null;
        if (auth != null && auth.isAuthenticated() && auth.getPrincipal() != null) {
            currentStaffUserId = auth.getName(); // v√≠ d·ª•: ST001
        }
        if (currentStaffUserId == null || currentStaffUserId.isBlank()) {
            currentStaffUserId = request.getStaffUserId();
        }

        // L∆∞u Swap record
        Integer dockIdForRecord = dockOutSlot.getDock() != null ? dockOutSlot.getDock().getDockId() : stationId;

>>>>>>> Stashed changes
        Swap swap = Swap.builder()
                .booking(booking)
                .dockId(dockIdForRecord)
                .userId(booking.getUser().getUserId())
                .batteryOutId(batteryOut.getBatteryId())
                .batteryInId(batteryIn.getBatteryId())
<<<<<<< Updated upstream
                .staffUserId(staffUserId)
=======
                .staffUserId(currentStaffUserId)
>>>>>>> Stashed changes
                .status(swapStatus)
                .dockOutSlot(dockOutCode)
                .dockInSlot(dockInCode)
                .completedTime(LocalDateTime.now())
                .description(description)
                .build();

        swapRepository.save(swap);

        // Response
        return SwapResponseDTO.builder()
                .swapId(swap.getSwapId())
                .status(swap.getStatus().toString())
                .message(swap.getDescription())
                .bookingId(booking.getBookingId())
                .batteryOutId(batteryOut.getBatteryId())
                .batteryInId(batteryIn.getBatteryId())
                .dockOutSlot(dockOutCode)
                .dockInSlot(dockInCode)
                .build();
    }

<<<<<<< Updated upstream
    //  RESOLVE STAFF ID
    private String resolveStaffUserId(SwapRequest request) {
        Authentication auth = SecurityContextHolder.getContext() != null
                ? SecurityContextHolder.getContext().getAuthentication()
                : null;

        if (auth != null && auth.isAuthenticated()) {
            Object principal = auth.getPrincipal();
            if (principal != null && !"anonymousUser".equals(principal)) {
                String name = auth.getName();
                if (name != null && !name.isBlank() && !"anonymousUser".equalsIgnoreCase(name)) {
                    return name; // v√≠ d·ª• ST005
                }
            }
        }

        if (request.getStaffUserId() != null && !request.getStaffUserId().isBlank()) {
            return request.getStaffUserId();
        }

        throw new IllegalStateException("Thi·∫øu staffUserId (ch∆∞a ƒëƒÉng nh·∫≠p staff ho·∫∑c kh√¥ng truy·ªÅn staffUserId).");
    }
=======
>>>>>>> Stashed changes
}

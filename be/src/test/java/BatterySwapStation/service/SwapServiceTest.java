package BatterySwapStation.service;

import BatterySwapStation.dto.SwapRequest;
import BatterySwapStation.dto.SwapResponseDTO;
import BatterySwapStation.entity.*;
import BatterySwapStation.repository.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.time.LocalDate;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
class SwapServiceTest {

    @Mock
    private SwapRepository swapRepository;
    @Mock
    private BookingRepository bookingRepository;
    @Mock
    private BatteryRepository batteryRepository;
    @Mock
    private DockSlotRepository dockSlotRepository;

    @InjectMocks
    private SwapService swapService;

    private Booking booking;
    private Battery batteryIn;
    private Battery batteryOut;
    private DockSlot dockInSlot;
    private DockSlot dockOutSlot;
    private SwapRequest request;

    @BeforeEach
    void setup() {
        booking = new Booking();
        booking.setBookingId(100L);
        booking.setBookingStatus(Booking.BookingStatus.PENDINGSWAPPING);
        booking.setBatteryType("LEAD_ACID");

        Station station = new Station();
        station.setStationId(1);
        booking.setStation(station);

        User user = new User();
        user.setUserId("USR001");
        booking.setUser(user);

        batteryIn = new Battery();
        batteryIn.setBatteryId("BAT001");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setBatteryStatus(Battery.BatteryStatus.AVAILABLE);
        batteryIn.setActive(true);
        batteryIn.setStateOfHealth(95.0);

        batteryOut = new Battery();
        batteryOut.setBatteryId("BAT002");
        batteryOut.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryOut.setBatteryStatus(Battery.BatteryStatus.AVAILABLE);
        batteryOut.setActive(true);

        Dock dock = new Dock();
        dock.setDockId(10);
        dock.setDockName("A");
        dock.setStation(station);

        dockInSlot = new DockSlot();
        dockInSlot.setDock(dock);
        dockInSlot.setSlotNumber(1);
        dockInSlot.setActive(true);

        dockOutSlot = new DockSlot();
        dockOutSlot.setDock(dock);
        dockOutSlot.setSlotNumber(2);
        dockOutSlot.setBattery(batteryOut);
        dockOutSlot.setSlotStatus(DockSlot.SlotStatus.OCCUPIED);

        request = new SwapRequest();
        request.setBookingId(100L);
        request.setBatteryInId("BAT001");
        request.setStaffUserId("ST001");
    }

    // ‚úÖ CASE 1: Swap th√†nh c√¥ng b√¨nh th∆∞·ªùng
    @Test
    void commitSwap_Success() {
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        SwapResponseDTO result = swapService.commitSwap(request);

        assertEquals("SUCCESS", result.getStatus());
        assertTrue(result.getMessage().contains("Swap ho√†n t·∫•t"));
        verify(swapRepository).save(any(Swap.class));
    }

    // ‚úÖ CASE 2: Pin kh√°c lo·∫°i booking -> throw exception
    @Test
    void commitSwap_Fail_WrongModelComparedToBooking() {
        batteryIn.setBatteryType(Battery.BatteryType.LITHIUM_ION);
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));

        IllegalStateException ex = assertThrows(IllegalStateException.class,
                () -> swapService.commitSwap(request));

        assertTrue(ex.getMessage().contains("Pin kh√¥ng c√πng lo·∫°i"));
    }

    // ‚úÖ CASE 3: Pin b·ªã v√¥ hi·ªáu h√≥a
    @Test
    void commitSwap_Fail_BatteryInactive() {
        batteryIn.setActive(false);
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));

        IllegalStateException ex = assertThrows(IllegalStateException.class,
                () -> swapService.commitSwap(request));
        assertTrue(ex.getMessage().contains("v√¥ hi·ªáu h√≥a"));
    }

    // ‚úÖ CASE 4: Pin ƒëang b·∫£o tr√¨
    @Test
    void commitSwap_Fail_BatteryUnderMaintenance() {
        batteryIn.setBatteryStatus(Battery.BatteryStatus.MAINTENANCE);
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));

        IllegalStateException ex = assertThrows(IllegalStateException.class,
                () -> swapService.commitSwap(request));
        assertTrue(ex.getMessage().contains("b·∫£o tr√¨"));
    }

    // ‚úÖ CASE 5: Pin ch∆∞a c√≥ lo·∫°i (null type)
    @Test
    void commitSwap_Fail_BatteryTypeNull() {
        batteryIn.setBatteryType(null);
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));

        IllegalStateException ex = assertThrows(IllegalStateException.class,
                () -> swapService.commitSwap(request));
        assertTrue(ex.getMessage().contains("Pin ch∆∞a x√°c ƒë·ªãnh lo·∫°i"));
    }

    // ‚úÖ CASE 6: Pin kh√°c model -> WAITING_USER_RETRY
    @Test
    void commitSwap_WaitingUserRetry_DifferentModel() {
        // b·ªè check ƒë·∫ßu ti√™n ƒë·ªÉ ƒëi t·ªõi nh√°nh WAITING_USER_RETRY
        booking.setBatteryType(null);
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryOut.setBatteryType(Battery.BatteryType.LITHIUM_ION);

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        SwapResponseDTO result = swapService.commitSwap(request);

        assertEquals("WAITING_USER_RETRY", result.getStatus());
        assertTrue(result.getMessage().contains("Pin kh√°c model"));
        verify(swapRepository).save(any(Swap.class));
    }

    // ‚úÖ CASE 7: Booking ƒë√£ completed -> kh√¥ng cho swap
    @Test
    void commitSwap_Fail_BookingAlreadyCompleted() {
        booking.setBookingStatus(Booking.BookingStatus.COMPLETED);
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));

        IllegalStateException ex = assertThrows(IllegalStateException.class,
                () -> swapService.commitSwap(request));
        assertTrue(ex.getMessage().contains("Booking ƒë√£ ho√†n th√†nh"));
    }

    // ‚úÖ CASE 8: Kh√¥ng c√≤n slot tr·ªëng ƒë·ªÉ nh·∫≠n pinIn
    @Test
    void commitSwap_Fail_NoEmptySlotForBatteryIn() {
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.empty());

        IllegalStateException ex = assertThrows(IllegalStateException.class,
                () -> swapService.commitSwap(request));
        assertTrue(ex.getMessage().contains("Kh√¥ng c√≤n slot tr·ªëng"));
    }

    // ‚úÖ CASE 9: Pin c√≥ SoH th·∫•p < 70 ‚Üí chuy·ªÉn MAINTENANCE v√† kh√≥a slot
    @Test
    void commitSwap_Success_SoHLow_BatteryGoesMaintenance() {
        booking.setBatteryType("LEAD_ACID");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setStateOfHealth(65.0); // üî∏ SoH th·∫•p
        batteryOut.setBatteryType(Battery.BatteryType.LEAD_ACID);

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        SwapResponseDTO result = swapService.commitSwap(request);

        assertEquals("SUCCESS", result.getStatus());
        assertTrue(result.getMessage().contains("SoH th·∫•p"));
        assertEquals(Battery.BatteryStatus.MAINTENANCE, batteryIn.getBatteryStatus());
        assertEquals(DockSlot.SlotStatus.RESERVED, dockInSlot.getSlotStatus());
    }

    // ‚úÖ CASE 10: Pin kh√¥ng c√≥ SoH (null) -> ƒëi v√†o nh√°nh else
    @Test
    void commitSwap_Success_SoHNull_TreatedAsAvailable() {
        batteryIn.setStateOfHealth(null);
        booking.setBatteryType("LEAD_ACID");

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        SwapResponseDTO result = swapService.commitSwap(request);

        assertEquals("SUCCESS", result.getStatus());
        assertEquals(Battery.BatteryStatus.AVAILABLE, batteryIn.getBatteryStatus());
        assertEquals(DockSlot.SlotStatus.OCCUPIED, dockInSlot.getSlotStatus());
    }


    // ‚úÖ CASE 11: C√≥ SecurityContextHolder v·ªõi staff userId
    @Test
    void commitSwap_Success_WithSecurityContext() {
        batteryIn.setStateOfHealth(95.0);
        booking.setBatteryType("LEAD_ACID");

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        // Gi·∫£ l·∫≠p SecurityContext
        var authentication = mock(org.springframework.security.core.Authentication.class);
        when(authentication.isAuthenticated()).thenReturn(true);
        when(authentication.getPrincipal()).thenReturn("ST999");
        when(authentication.getName()).thenReturn("ST999");
        org.springframework.security.core.context.SecurityContext context =
                mock(org.springframework.security.core.context.SecurityContext.class);
        when(context.getAuthentication()).thenReturn(authentication);
        org.springframework.security.core.context.SecurityContextHolder.setContext(context);

        SwapResponseDTO result = swapService.commitSwap(request);
        assertEquals("SUCCESS", result.getStatus());
        verify(swapRepository).save(any(Swap.class));
    }
    // ‚úÖ CASE 12: Kh√¥ng c√≤n pin kh·∫£ d·ª•ng trong tr·∫°m
    @Test
    void commitSwap_Fail_NoBatteryOutAvailable() {
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.empty());

        IllegalStateException ex = assertThrows(IllegalStateException.class,
                () -> swapService.commitSwap(request));
        assertTrue(ex.getMessage().contains("Kh√¥ng c√≤n pin ƒë·∫ßy kh·∫£ d·ª•ng"));
    }

    // ‚úÖ CASE 13: C√≥ SecurityContextHolder -> currentStaffUserId l·∫•y t·ª´ auth
    @Test
    void commitSwap_Success_WithAuthenticatedStaffContext() {
        // Setup data
        booking.setBatteryType("LEAD_ACID");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setStateOfHealth(95.0);

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        // üîπ Gi·∫£ l·∫≠p SecurityContext c√≥ x√°c th·ª±c staff
        var authentication = mock(org.springframework.security.core.Authentication.class);
        when(authentication.isAuthenticated()).thenReturn(true);
        when(authentication.getPrincipal()).thenReturn("STCTX");
        when(authentication.getName()).thenReturn("STCTX");

        var context = mock(org.springframework.security.core.context.SecurityContext.class);
        when(context.getAuthentication()).thenReturn(authentication);
        org.springframework.security.core.context.SecurityContextHolder.setContext(context);

        // Run
        SwapResponseDTO result = swapService.commitSwap(request);

        // Assert
        assertEquals("SUCCESS", result.getStatus());
        verify(swapRepository).save(any(Swap.class));

        // Reset context sau test
        org.springframework.security.core.context.SecurityContextHolder.clearContext();
    }

    // ‚úÖ CASE 14: Slot ch·ª©a pinOut nh∆∞ng batteryOut = null ‚Üí n√©m l·ªói h·ª£p l·ªá
    @Test
    void commitSwap_Fail_BatteryOutNull() {
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));

        // üîπ Gi·∫£ l·∫≠p dockOutSlot c√≥ battery = null
        DockSlot brokenDock = new DockSlot();
        brokenDock.setDock(dockOutSlot.getDock());
        brokenDock.setSlotNumber(3);
        brokenDock.setBattery(null); // L·ªói ch√≠nh ·ªü ƒë√¢y
        brokenDock.setSlotStatus(DockSlot.SlotStatus.OCCUPIED);

        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(brokenDock));

        IllegalStateException ex = assertThrows(IllegalStateException.class,
                () -> swapService.commitSwap(request));
        assertTrue(ex.getMessage().contains("Slot ch·ª©a pinOut kh√¥ng h·ª£p l·ªá"));
    }
    @Test
    void commitSwap_Success_NoSecurityContext_UseRequestStaffId() {
        booking.setBatteryType("LEAD_ACID");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setStateOfHealth(95.0);

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        // Kh√¥ng set SecurityContextHolder
        org.springframework.security.core.context.SecurityContextHolder.clearContext();

        SwapResponseDTO result = swapService.commitSwap(request);
        assertEquals("SUCCESS", result.getStatus());
        verify(swapRepository).save(any(Swap.class));
    }

    @Test
    void commitSwap_Fail_BatteryNotFound() {
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.empty());

        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,
                () -> swapService.commitSwap(request));
        assertTrue(ex.getMessage().contains("Kh√¥ng t√¨m th·∫•y pin"));
    }

    @Test
    void commitSwap_Fail_BookingNotFound() {
        when(bookingRepository.findById(100L)).thenReturn(Optional.empty());

        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class,
                () -> swapService.commitSwap(request));
        assertTrue(ex.getMessage().contains("Kh√¥ng t√¨m th·∫•y booking"));
    }

    @Test
    void commitSwap_Success_AuthNotAuthenticated_FallbackToRequestStaff() {
        booking.setBatteryType("LEAD_ACID");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setStateOfHealth(95.0);

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        var authentication = mock(org.springframework.security.core.Authentication.class);
        when(authentication.isAuthenticated()).thenReturn(false);
        var context = mock(org.springframework.security.core.context.SecurityContext.class);
        when(context.getAuthentication()).thenReturn(authentication);
        org.springframework.security.core.context.SecurityContextHolder.setContext(context);

        SwapResponseDTO result = swapService.commitSwap(request);
        assertEquals("SUCCESS", result.getStatus());
    }

    // ‚úÖ CASE 12: Kh√¥ng c√≤n pin ƒë·∫ßy kh·∫£ d·ª•ng trong tr·∫°m
    @Test
    void commitSwap_Fail_BatteryOutNotAvailable() {
        // üîπ Setup: booking v√† batteryIn h·ª£p l·ªá
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));

        // üîπ Gi·∫£ l·∫≠p: kh√¥ng c√≥ pin ƒë·∫ßy kh·∫£ d·ª•ng trong tr·∫°m
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.empty());

        // üîπ G·ªçi h√†m v√† b·∫Øt exception
        IllegalStateException ex = assertThrows(IllegalStateException.class,
                () -> swapService.commitSwap(request));

        // üîπ Ki·ªÉm tra th√¥ng b√°o l·ªói
        String msg = ex.getMessage();
        System.out.println("Actual exception message: " + msg);
        assertTrue(
                msg.contains("Kh√¥ng c√≤n pin ƒë·∫ßy kh·∫£ d·ª•ng"),
                "Expected message to contain 'Kh√¥ng c√≤n pin ƒë·∫ßy kh·∫£ d·ª•ng'"
        );
    }

    @Test
    void commitSwap_Success_AuthNotAuthenticated_FallbackToRequestStaffId() {
        booking.setBatteryType("LEAD_ACID");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setStateOfHealth(95.0);

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        // üîπ Gi·∫£ l·∫≠p auth t·ªìn t·∫°i nh∆∞ng ch∆∞a x√°c th·ª±c
        var authentication = mock(org.springframework.security.core.Authentication.class);
        when(authentication.isAuthenticated()).thenReturn(false);
        when(authentication.getPrincipal()).thenReturn("STXXX");
        var context = mock(org.springframework.security.core.context.SecurityContext.class);
        when(context.getAuthentication()).thenReturn(authentication);
        org.springframework.security.core.context.SecurityContextHolder.setContext(context);

        SwapResponseDTO result = swapService.commitSwap(request);

        assertEquals("SUCCESS", result.getStatus());
        verify(swapRepository).save(any(Swap.class));

        org.springframework.security.core.context.SecurityContextHolder.clearContext();
    }
    @Test
    void commitSwap_Success_AuthPrincipalNull_UsesRequestStaffId() {
        booking.setBatteryType("LEAD_ACID");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setStateOfHealth(95.0);

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        var authentication = mock(org.springframework.security.core.Authentication.class);
        when(authentication.isAuthenticated()).thenReturn(true);
        when(authentication.getPrincipal()).thenReturn(null);
        var context = mock(org.springframework.security.core.context.SecurityContext.class);
        when(context.getAuthentication()).thenReturn(authentication);
        org.springframework.security.core.context.SecurityContextHolder.setContext(context);

        SwapResponseDTO result = swapService.commitSwap(request);

        assertEquals("SUCCESS", result.getStatus());
        verify(swapRepository).save(any(Swap.class));

        org.springframework.security.core.context.SecurityContextHolder.clearContext();
    }
    @Test
    void commitSwap_Success_DockOutWithoutDock_UsesStationIdForRecord() {
        booking.setBatteryType("LEAD_ACID");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setStateOfHealth(95.0);

        DockSlot missingDockSlot = new DockSlot();
        missingDockSlot.setSlotStatus(DockSlot.SlotStatus.OCCUPIED);
        missingDockSlot.setBattery(batteryOut);
        missingDockSlot.setDock(null); // üëà trigger nh√°nh else

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(missingDockSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        SwapResponseDTO result = swapService.commitSwap(request);
        assertEquals("SUCCESS", result.getStatus());
    }
    @Test
    void commitSwap_Success_BatteryInAlreadyInSlot() {
        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.of(dockInSlot));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));

        SwapResponseDTO result = swapService.commitSwap(request);
        assertEquals("SUCCESS", result.getStatus());
    }
    @Test
    void commitSwap_Success_SoHHigh_RemainsAvailable() {
        batteryIn.setStateOfHealth(85.0);
        booking.setBatteryType("LEAD_ACID");

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        SwapResponseDTO result = swapService.commitSwap(request);
        assertEquals("SUCCESS", result.getStatus());
        assertEquals(Battery.BatteryStatus.AVAILABLE, batteryIn.getBatteryStatus());
    }


    @Test
    void commitSwap_Success_StaffUserIdBlank_FallbackHandled() {
        booking.setBatteryType("LEAD_ACID");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setStateOfHealth(90.0);

        // üîπ request c√≥ staffUserId r·ªóng
        request.setStaffUserId("");

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        // üîπ Gi·∫£ l·∫≠p SecurityContext ƒë·∫ßy ƒë·ªß
        var authentication = mock(org.springframework.security.core.Authentication.class);
        when(authentication.isAuthenticated()).thenReturn(true);
        when(authentication.getPrincipal()).thenReturn("STFALLBACK");
        when(authentication.getName()).thenReturn("STFALLBACK");
        var context = mock(org.springframework.security.core.context.SecurityContext.class);
        when(context.getAuthentication()).thenReturn(authentication);
        org.springframework.security.core.context.SecurityContextHolder.setContext(context);

        SwapResponseDTO result = swapService.commitSwap(request);
        assertEquals("SUCCESS", result.getStatus());
        verify(swapRepository).save(any(Swap.class));

        org.springframework.security.core.context.SecurityContextHolder.clearContext();
    }
    @Test
    void commitSwap_Success_AuthPrincipalNullAndNameNull_FallbackToRequestStaffId() {
        booking.setBatteryType("LEAD_ACID");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setStateOfHealth(95.0);

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        // üîπ Gi·∫£ l·∫≠p auth c√≥ authenticated=true, principal=null, name=null
        var authentication = mock(org.springframework.security.core.Authentication.class);
        when(authentication.isAuthenticated()).thenReturn(true);
        when(authentication.getPrincipal()).thenReturn(null);
        when(authentication.getName()).thenReturn(null); // üëà
        var context = mock(org.springframework.security.core.context.SecurityContext.class);
        when(context.getAuthentication()).thenReturn(authentication);
        org.springframework.security.core.context.SecurityContextHolder.setContext(context);

        SwapResponseDTO result = swapService.commitSwap(request);

        assertEquals("SUCCESS", result.getStatus());
        verify(swapRepository).save(any(Swap.class));

        org.springframework.security.core.context.SecurityContextHolder.clearContext();
    }
    @Test
    void commitSwap_Success_WhenSecurityContextCompletelyNull() {
        booking.setBatteryType("LEAD_ACID");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setStateOfHealth(95.0);

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        // ‚ö°Ô∏è Trick: mock static method getContext() ƒë·ªÉ tr·∫£ v·ªÅ null
        try (var mocked = mockStatic(org.springframework.security.core.context.SecurityContextHolder.class)) {
            mocked.when(org.springframework.security.core.context.SecurityContextHolder::getContext)
                    .thenReturn(null);

            SwapResponseDTO result = swapService.commitSwap(request);

            assertEquals("SUCCESS", result.getStatus());
            verify(swapRepository).save(any(Swap.class));
        }
    }
    @Test
    void commitSwap_Success_StaffUserIdAlreadyValid_NoFallbackTriggered() {
        booking.setBatteryType("LEAD_ACID");
        batteryIn.setBatteryType(Battery.BatteryType.LEAD_ACID);
        batteryIn.setStateOfHealth(90.0);

        when(bookingRepository.findById(100L)).thenReturn(Optional.of(booking));
        when(batteryRepository.findById("BAT001")).thenReturn(Optional.of(batteryIn));
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndSlotStatusAndBattery_BatteryStatusOrderByDock_DockNameAscSlotNumberAsc(
                        1, DockSlot.SlotStatus.OCCUPIED, Battery.BatteryStatus.AVAILABLE))
                .thenReturn(Optional.of(dockOutSlot));
        when(dockSlotRepository.findByBattery_BatteryId("BAT001")).thenReturn(Optional.empty());
        when(dockSlotRepository
                .findFirstByDock_Station_StationIdAndIsActiveTrueAndBatteryIsNull(1))
                .thenReturn(Optional.of(dockInSlot));

        // üîπ Gi·∫£ l·∫≠p auth h·ª£p l·ªá v·ªõi principal h·ª£p l·ªá
        var authentication = mock(org.springframework.security.core.Authentication.class);
        when(authentication.isAuthenticated()).thenReturn(true);
        when(authentication.getPrincipal()).thenReturn("ST888");
        when(authentication.getName()).thenReturn("ST888");
        var context = mock(org.springframework.security.core.context.SecurityContext.class);
        when(context.getAuthentication()).thenReturn(authentication);
        org.springframework.security.core.context.SecurityContextHolder.setContext(context);

        // üîπ request c√≥ staff ID h·ª£p l·ªá (ƒë·ªÉ kh√¥ng fallback)
        request.setStaffUserId("ST888");

        SwapResponseDTO result = swapService.commitSwap(request);

        assertEquals("SUCCESS", result.getStatus());
        verify(swapRepository).save(any(Swap.class));

        org.springframework.security.core.context.SecurityContextHolder.clearContext();
    }


}
